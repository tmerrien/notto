{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDJS",
          "fullName": "Qodana for JS",
          "version": "252.25440",
          "rules": [],
          "taxa": [
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "HTTP Client",
              "name": "HTTP Client"
            },
            {
              "id": "Angular",
              "name": "Angular"
            },
            {
              "id": "PostCSS",
              "name": "PostCSS"
            },
            {
              "id": "Sass_SCSS",
              "name": "Sass/SCSS"
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Cucumber",
              "name": "Cucumber"
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 17,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 30,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Handlebars_Mustache",
              "name": "Handlebars/Mustache"
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Dependency analysis",
              "name": "Dependency analysis"
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 30,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Less",
              "name": "Less"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Vue",
              "name": "Vue"
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 30,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Code Coverage",
              "name": "Code Coverage"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Security",
              "name": "Security"
            },
            {
              "id": "Qodana",
              "name": "Qodana"
            },
            {
              "id": "EJS",
              "name": "EJS"
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "JSONPath",
              "name": "JSONPath"
            },
            {
              "id": "Pug_Jade",
              "name": "Pug/Jade"
            },
            {
              "id": "JavaScript and TypeScript/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDJS"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "JavaScript",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression. Inspection ID: ConstantConditionalExpressionJS'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`\n\nInspection ID: ConstantConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test. Inspection ID: JSTestFailedLine",
                  "markdown": "Reports a failed method call or an assertion in a test.\n\nInspection ID: JSTestFailedLine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTestFailedLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance. Inspection ID: NonBlockStatementBodyJS",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.\n\nInspection ID: NonBlockStatementBodyJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonBlockStatementBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected. Inspection ID: IfStatementWithTooManyBranchesJS",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected.\n\nInspection ID: IfStatementWithTooManyBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithTooManyBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment. Inspection ID: JSValidateJSDoc",
                  "markdown": "Reports a syntax discrepancy in a documentation comment.\n\nInspection ID: JSValidateJSDoc"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSValidateJSDoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks. Inspection ID: BreakStatementJS",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks.\n\nInspection ID: BreakStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project. Inspection ID: FlowJSConfig",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project.\n\nInspection ID: FlowJSConfig"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class. Inspection ID: JSPotentiallyInvalidUsageOfClassThis",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class.\n\nInspection ID: JSPotentiallyInvalidUsageOfClassThis"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfClassThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code. Inspection ID: DebuggerStatementJS",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.\n\nInspection ID: DebuggerStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DebuggerStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons). Inspection ID: JSUnusedAssignment",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons).\n\nInspection ID: JSUnusedAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity. Inspection ID: ReuseOfLocalVariableJS",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.\n\nInspection ID: ReuseOfLocalVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReuseOfLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values. Inspection ID: ShiftOutOfRangeJS",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values.\n\nInspection ID: ShiftOutOfRangeJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ShiftOutOfRangeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements. Inspection ID: UnnecessaryContinueJS",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements.\n\nInspection ID: UnnecessaryContinueJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryContinueJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags. Inspection ID: JSClosureCompilerSyntax",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags.\n\nInspection ID: JSClosureCompilerSyntax"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClosureCompilerSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'. Inspection ID: ES6ConvertLetToConst",
                  "markdown": "Reports a `let` declaration that can be made `const`.  \n\nInspection ID: ES6ConvertLetToConst"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertLetToConst",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements. Inspection ID: JSXDomNesting",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.\n\nInspection ID: JSXDomNesting"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSXDomNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type. Inspection ID: TypeScriptValidateTypes",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type.\n\nInspection ID: TypeScriptValidateTypes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error. Inspection ID: BadExpressionStatementJS",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.\n\nInspection ID: BadExpressionStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "BadExpressionStatementJS",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards. Inspection ID: ConfusingFloatingPointLiteralJS",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.\n\nInspection ID: ConfusingFloatingPointLiteralJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingFloatingPointLiteralJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement. Inspection ID: BreakStatementWithLabelJS",
                  "markdown": "Reports a labeled `break` statement.\n\nInspection ID: BreakStatementWithLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging. Inspection ID: ContinueOrBreakFromFinallyBlockJS",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging.\n\nInspection ID: ContinueOrBreakFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueOrBreakFromFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function. Inspection ID: StatementsPerFunctionJS",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function.\n\nInspection ID: StatementsPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionTooLongJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging. Inspection ID: UnnecessaryLocalVariableJS",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging.\n\nInspection ID: UnnecessaryLocalVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods. Inspection ID: JSMethodCanBeStatic",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods.\n\nInspection ID: JSMethodCanBeStatic"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMethodCanBeStatic",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code. Inspection ID: JSDeclarationsAtScopeStart",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.\n\nInspection ID: JSDeclarationsAtScopeStart"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeclarationsAtScopeStart",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement. Inspection ID: ContinueStatementWithLabelJS",
                  "markdown": "Reports a labeled `continue` statement.\n\nInspection ID: ContinueStatementWithLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'. Inspection ID: JSObjectNullOrUndefined",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`.\n\nInspection ID: JSObjectNullOrUndefined"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSObjectNullOrUndefined",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property. Inspection ID: TypeScriptMissingConfigOption",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property.\n\nInspection ID: TypeScriptMissingConfigOption"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingConfigOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates. Inspection ID: JSXUnresolvedComponent",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates.\n\nInspection ID: JSXUnresolvedComponent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}' Inspection ID: ES6ShorthandObjectProperty",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n\nInspection ID: ES6ShorthandObjectProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ShorthandObjectProperty",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control. Inspection ID: UnnecessaryLabelOnBreakStatementJS",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control.\n\nInspection ID: UnnecessaryLabelOnBreakStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnBreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement. Inspection ID: ContinueStatementJS",
                  "markdown": "Reports a `continue` statement.\n\nInspection ID: ContinueStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error. Inspection ID: AssignmentToForLoopParameterJS",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\nInspection ID: AssignmentToForLoopParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToForLoopParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag. Inspection ID: JSPotentiallyInvalidConstructorUsage",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag.\n\nInspection ID: JSPotentiallyInvalidConstructorUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidConstructorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring. Inspection ID: PointlessArithmeticExpressionJS",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.\n\nInspection ID: PointlessArithmeticExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list. Inspection ID: NodeCoreCodingAssistance",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list.\n\nInspection ID: NodeCoreCodingAssistance"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NodeCoreCodingAssistance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere' Inspection ID: JSUndeclaredVariable",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n\nInspection ID: JSUndeclaredVariable"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndeclaredVariable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero. Inspection ID: DivideByZeroJS",
                  "markdown": "Reports division by zero or a remainder by zero.\n\nInspection ID: DivideByZeroJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DivideByZeroJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost. Inspection ID: JSPrimitiveTypeWrapperUsage",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.\n\nInspection ID: JSPrimitiveTypeWrapperUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPrimitiveTypeWrapperUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection. Inspection ID: TypeScriptSmartCast",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.\n\nInspection ID: TypeScriptSmartCast"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSmartCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects. Inspection ID: ES6ConvertIndexedForToForOf",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects.\n\nInspection ID: ES6ConvertIndexedForToForOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertIndexedForToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation. Inspection ID: JSLastCommaInArrayLiteral",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**.\n\nInspection ID: JSLastCommaInArrayLiteral"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements. Inspection ID: ConditionalExpressionJS",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements.\n\nInspection ID: ConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action. Inspection ID: ES6ConvertVarToLetConst",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.\n\nInspection ID: ES6ConvertVarToLetConst"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertVarToLetConst",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }' Inspection ID: JSReferencingMutableVariableFromClosure",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n\nInspection ID: JSReferencingMutableVariableFromClosure"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSReferencingMutableVariableFromClosure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;' Inspection ID: PointlessBooleanExpressionJS",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n\nInspection ID: PointlessBooleanExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation. Inspection ID: DynamicallyGeneratedCodeJS",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation.\n\nInspection ID: DynamicallyGeneratedCodeJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DynamicallyGeneratedCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1' Inspection ID: NegatedConditionalExpressionJS",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`\n\nInspection ID: NegatedConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language. Inspection ID: JSUrlImportUsage",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.\n\nInspection ID: JSUrlImportUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUrlImportUsage",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control. Inspection ID: UnnecessaryLabelOnContinueStatementJS",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control.\n\nInspection ID: UnnecessaryLabelOnContinueStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing. Inspection ID: ChainedEqualityJS",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing.\n\nInspection ID: ChainedEqualityJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedEqualityComparisonsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'. Inspection ID: SillyAssignmentJS",
                  "markdown": "Reports an assignment in the form `x = x`.\n\nInspection ID: SillyAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SillyAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'. Inspection ID: JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`.\n\nInspection ID: JSPotentiallyInvalidTargetOfIndexedPropertyAccess"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply. Inspection ID: JSAccessibilityCheck",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply.\n\nInspection ID: JSAccessibilityCheck"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAccessibilityCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action. Inspection ID: ES6ConvertRequireIntoImport",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.\n\nInspection ID: ES6ConvertRequireIntoImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertRequireIntoImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements. Inspection ID: FunctionWithMultipleLoopsJS",
                  "markdown": "Reports a function with multiple loop statements.\n\nInspection ID: FunctionWithMultipleLoopsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleLoopsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement. Inspection ID: LabeledStatementJS",
                  "markdown": "Reports a labeled statement.\n\nInspection ID: LabeledStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LabeledStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library. Inspection ID: NpmUsedModulesInstalled",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library.\n\nInspection ID: NpmUsedModulesInstalled"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "NpmUsedModulesInstalled",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments. Inspection ID: UnusedCatchParameterJS",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments.\n\nInspection ID: UnusedCatchParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedCatchParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables. Inspection ID: WithStatementJS",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.\n\nInspection ID: WithStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WithStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code. Inspection ID: TypeScriptCheckImport",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code.\n\nInspection ID: TypeScriptCheckImport"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptCheckImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable. Inspection ID: JSConstantReassignment",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable.\n\nInspection ID: JSConstantReassignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSConstantReassignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored. Inspection ID: MagicNumberJS",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.\n\nInspection ID: MagicNumberJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicNumberJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions. Inspection ID: FunctionNamingConventionJS",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions.\n\nInspection ID: FunctionNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code. Inspection ID: JSXSyntaxUsed",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code.\n\nInspection ID: JSXSyntaxUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSXSyntaxUsed",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression. Inspection ID: JSJoinVariableDeclarationAndAssignment",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.\n\nInspection ID: JSJoinVariableDeclarationAndAssignment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSJoinVariableDeclarationAndAssignment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only. Inspection ID: JSRedundantSwitchStatement",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only.\n\nInspection ID: JSRedundantSwitchStatement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRedundantSwitchStatement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'. Inspection ID: TypeScriptLibrary",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`.\n\nInspection ID: TypeScriptLibrary"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptLibrary",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import. Inspection ID: TypeScriptMissingAugmentationImport",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import.\n\nInspection ID: TypeScriptMissingAugmentationImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingAugmentationImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property. Inspection ID: JSUnusedGlobalSymbols",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property.\n\nInspection ID: JSUnusedGlobalSymbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedGlobalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module. Inspection ID: ES6ConvertModuleExportToExport",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module.\n\nInspection ID: ES6ConvertModuleExportToExport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertModuleExportToExport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs. Inspection ID: DocumentWriteJS",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.\n\nInspection ID: DocumentWriteJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DocumentWriteJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported. Inspection ID: AnonymousFunctionJS",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported.\n\nInspection ID: AnonymousFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables. Inspection ID: BlockStatementJS",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables.\n\nInspection ID: BlockStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy. Inspection ID: ObjectAllocationIgnoredJS",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.\n\nInspection ID: ObjectAllocationIgnoredJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectAllocationIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally. Inspection ID: InfiniteRecursionJS",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.\n\nInspection ID: InfiniteRecursionJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'. Inspection ID: JSTypeOfValues",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`.\n\nInspection ID: JSTypeOfValues"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTypeOfValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic. Inspection ID: NestedConditionalExpressionJS",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.\n\nInspection ID: NestedConditionalExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: '// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}' Inspection ID: IncompatibleMaskJS",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n\nInspection ID: IncompatibleMaskJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncompatibleBitwiseMaskOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }' Inspection ID: TextLabelInSwitchStatementJS",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n\nInspection ID: TextLabelInSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextLabelInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'. Inspection ID: ES6PossiblyAsyncFunction",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`.\n\nInspection ID: ES6PossiblyAsyncFunction"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6PossiblyAsyncFunction",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection. Inspection ID: EmptyCatchBlockJS",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection.\n\nInspection ID: EmptyCatchBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyCatchBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter. Inspection ID: JSHint",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter.\n\nInspection ID: JSHint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSHint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSFlagCommentPlacement",
                "shortDescription": {
                  "text": "Misplaced @flow flag"
                },
                "fullDescription": {
                  "text": "Reports a '@flow' flag comment that is not located at the top of a file. Inspection ID: FlowJSFlagCommentPlacement",
                  "markdown": "Reports a `@flow` flag comment that is not located at the top of a file.\n\nInspection ID: FlowJSFlagCommentPlacement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSFlagCommentPlacement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules. Inspection ID: Eslint",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.\n\nInspection ID: Eslint"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Eslint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope. Inspection ID: JSDuplicatedDeclaration",
                  "markdown": "Reports multiple declarations in a scope.\n\nInspection ID: JSDuplicatedDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicatedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'. Inspection ID: JSEqualityComparisonWithCoercion.TS",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`.\n\nInspection ID: JSEqualityComparisonWithCoercion.TS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below. Inspection ID: JSOctalInteger",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.\n\nInspection ID: JSOctalInteger"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSOctalInteger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing. Inspection ID: ExceptionCaughtLocallyJS",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing.\n\nInspection ID: ExceptionCaughtLocallyJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionCaughtLocallyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging. Inspection ID: ThrowFromFinallyBlockJS",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging.\n\nInspection ID: ThrowFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration. Inspection ID: TypeScriptValidateGenericTypes",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration.\n\nInspection ID: TypeScriptValidateGenericTypes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateGenericTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function. Inspection ID: CyclomaticComplexityJS",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function.\n\nInspection ID: CyclomaticComplexityJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods. Inspection ID: JSMismatchedCollectionQueryUpdate",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods.\n\nInspection ID: JSMismatchedCollectionQueryUpdate"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSMismatchedCollectionQueryUpdate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range. Inspection ID: PackageJsonMismatchedDependency",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning).\n\nInspection ID: PackageJsonMismatchedDependency"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageJsonMismatchedDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}' Inspection ID: JSPotentiallyInvalidUsageOfThis",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n\nInspection ID: JSPotentiallyInvalidUsageOfThis"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated. Inspection ID: JSMissingSwitchDefault",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated.\n\nInspection ID: JSMissingSwitchDefault"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchDefault",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation. Inspection ID: JSXNamespaceValidation",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.\n\nInspection ID: JSXNamespaceValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXNamespaceValidation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation. Inspection ID: JSUnresolvedLibraryURL",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.\n\nInspection ID: JSUnresolvedLibraryURL"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedLibraryURL",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory. Inspection ID: ES6PreferShortImport",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory.\n\nInspection ID: ES6PreferShortImport"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6PreferShortImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings. Inspection ID: PointlessBitwiseExpressionJS",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.\n\nInspection ID: PointlessBitwiseExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBitwiseExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors. Inspection ID: InfiniteLoopJS",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors.\n\nInspection ID: InfiniteLoopJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`' Inspection ID: JSStringConcatenationToES6Template",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n\nInspection ID: JSStringConcatenationToES6Template"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSStringConcatenationToES6Template",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;' Inspection ID: JSArrowFunctionBracesCanBeRemoved",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n\nInspection ID: JSArrowFunctionBracesCanBeRemoved"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSArrowFunctionBracesCanBeRemoved",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'\n Inspection ID: ReplaceAssignmentWithOperatorAssignmentJS",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n\nInspection ID: ReplaceAssignmentWithOperatorAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentReplaceableWithOperatorAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references. Inspection ID: JSFileReferences",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.\n\nInspection ID: JSFileReferences"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSFileReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'\n Inspection ID: FunctionWithInconsistentReturnsJS",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\nInspection ID: FunctionWithInconsistentReturnsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithInconsistentReturnsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later. Inspection ID: ES6ClassMemberInitializationOrder",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.\n\nInspection ID: ES6ClassMemberInitializationOrder"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6ClassMemberInitializationOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error. Inspection ID: EmptyTryBlockJS",
                  "markdown": "Reports an empty `try` block, which usually indicates an error.\n\nInspection ID: EmptyTryBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyTryBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords. Inspection ID: ReservedWordUsedAsNameJS",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.\n\nInspection ID: ReservedWordUsedAsNameJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReservedWordAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions. Inspection ID: JSClassNamingConvention",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions.\n\nInspection ID: JSClassNamingConvention"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClassNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions. Inspection ID: NestedFunctionJS",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions.\n\nInspection ID: NestedFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors. Inspection ID: XHTMLIncompatabilitiesJS",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors** .\n\nInspection ID: XHTMLIncompatabilitiesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XHTMLIncompatabilitiesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++' Inspection ID: IncrementDecrementResultUsedJS",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`\n\nInspection ID: IncrementDecrementResultUsedJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncrementDecrementResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A' Inspection ID: SuspiciousTypeOfGuard",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`\n\nInspection ID: SuspiciousTypeOfGuard"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousTypeOfGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates. Inspection ID: TypeScriptJSXUnresolvedComponent",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates.\n\nInspection ID: TypeScriptJSXUnresolvedComponent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptJSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor). Inspection ID: TypeScriptFieldCanBeMadeReadonly",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).\n\nInspection ID: TypeScriptFieldCanBeMadeReadonly"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptFieldCanBeMadeReadonly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties. Inspection ID: ES6DestructuringVariablesMerge",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.\n\nInspection ID: ES6DestructuringVariablesMerge"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6DestructuringVariablesMerge",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error. Inspection ID: LoopStatementThatDoesntLoopJS",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.\n\nInspection ID: LoopStatementThatDoesntLoopJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopStatementThatDoesntLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements. Inspection ID: NegatedIfStatementJS",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements.\n\nInspection ID: NegatedIfStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols. Inspection ID: JSNonASCIINames",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols.\n\nInspection ID: JSNonASCIINames"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonASCIINames",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: 'type Foo<T=number> = T;\nlet z: Foo<number>;' Inspection ID: TypeScriptRedundantGenericType",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n\nInspection ID: TypeScriptRedundantGenericType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptRedundantGenericType",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly. Inspection ID: TypeScriptUMDGlobal",
                  "markdown": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.\n\nInspection ID: TypeScriptUMDGlobal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptUMDGlobal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed. Inspection ID: UnnecessaryReturnJS",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.\n\nInspection ID: UnnecessaryReturnJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryReturnStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches. Inspection ID: ConditionalExpressionWithIdenticalBranchesJS",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches.\n\nInspection ID: ConditionalExpressionWithIdenticalBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors. Inspection ID: JSAnnotator",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.\n\nInspection ID: JSAnnotator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSAnnotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}' Inspection ID: JSUnfilteredForInLoop",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n\nInspection ID: JSUnfilteredForInLoop"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnfilteredForInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values. Inspection ID: JSIncompatibleTypesComparison",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.\n\nInspection ID: JSIncompatibleTypesComparison"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIncompatibleTypesComparison",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation. Inspection ID: JSLastCommaInObjectLiteral",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**.\n\nInspection ID: JSLastCommaInObjectLiteral"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInObjectLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)' Inspection ID: JSFunctionExpressionToArrowFunction",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n\nInspection ID: JSFunctionExpressionToArrowFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSFunctionExpressionToArrowFunction",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed. Inspection ID: ES6TopLevelAwaitExpression",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed.\n\nInspection ID: ES6TopLevelAwaitExpression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ES6TopLevelAwaitExpression",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces. Inspection ID: ES6MissingAwait",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces).\n\nInspection ID: ES6MissingAwait"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6MissingAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments. Inspection ID: TailRecursionJS",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.\n\nInspection ID: TailRecursionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TailRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties. Inspection ID: ES6ConvertToForOf",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties.\n\nInspection ID: ES6ConvertToForOf"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions. Inspection ID: ParameterNamingConventionJS",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions.\n\nInspection ID: ParameterNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad' Inspection ID: JSUndefinedPropertyAssignment",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n\nInspection ID: JSUndefinedPropertyAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndefinedPropertyAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports. Inspection ID: StandardJS",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports.\n\nInspection ID: StandardJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "StandardJS",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function. Inspection ID: ParametersPerFunctionJS",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function.\n\nInspection ID: ParametersPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless. Inspection ID: ThisExpressionReferencesGlobalObjectJS",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless.\n\nInspection ID: ThisExpressionReferencesGlobalObjectJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThisExpressionReferencesGlobalObjectJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing. Inspection ID: NestedAssignmentJS",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.\n\nInspection ID: NestedAssignmentJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion. Inspection ID: DefaultNotLastCaseInSwitchJS",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion.\n\nInspection ID: DefaultNotLastCaseInSwitchJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultNotLastCaseInSwitchJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace. Inspection ID: ConfusingPlusesOrMinusesJS",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace.\n\nInspection ID: ConfusingPlusesOrMinusesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingPlusesOrMinusesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable. Inspection ID: JSDeprecatedSymbols",
                  "markdown": "Reports a usage of a deprecated function variable.\n\nInspection ID: JSDeprecatedSymbols"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeprecatedSymbols",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions. Inspection ID: LocalVariableNamingConventionJS",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions.\n\nInspection ID: LocalVariableNamingConventionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error. Inspection ID: EmptyFinallyBlockJS",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error.\n\nInspection ID: EmptyFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}' Inspection ID: JSCommentMatchesSignature",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n\nInspection ID: JSCommentMatchesSignature"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSCommentMatchesSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions. Inspection ID: UpdateDependencyToLatestVersion",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.\n\nInspection ID: UpdateDependencyToLatestVersion"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UpdateDependencyToLatestVersion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference. Inspection ID: TypeScriptConfig",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference.\n\nInspection ID: TypeScriptConfig"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Here the inspection guesses that 'x' and 'y' are mixed up. Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group. Inspection ID: JSSuspiciousNameCombination",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group.\n\nInspection ID: JSSuspiciousNameCombination"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousNameCombination",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class. Inspection ID: JSUnresolvedExtXType",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class.\n\nInspection ID: JSUnresolvedExtXType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedExtXType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable. Inspection ID: ForLoopThatDoesntUseLoopVariableJS",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable.\n\nInspection ID: ForLoopThatDoesntUseLoopVariableJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopThatDoesntUseLoopVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public). Inspection ID: TypeScriptAbstractClassConstructorCanBeMadeProtected",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).\n\nInspection ID: TypeScriptAbstractClassConstructorCanBeMadeProtected"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain. Inspection ID: FunctionWithMultipleReturnPointsJS",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain.\n\nInspection ID: FunctionWithMultipleReturnPointsJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleReturnPointsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error. Inspection ID: JSIgnoredPromiseFromCall",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error.\n\nInspection ID: JSIgnoredPromiseFromCall"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIgnoredPromiseFromCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing. Inspection ID: ThreeNegationsPerFunctionJS",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing.\n\nInspection ID: ThreeNegationsPerFunctionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMoreThanThreeNegationsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)' Inspection ID: JSRemoveUnnecessaryParentheses",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n\nInspection ID: JSRemoveUnnecessaryParentheses"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRemoveUnnecessaryParentheses",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression. Inspection ID: OverlyComplexBooleanExpressionJS",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\nInspection ID: OverlyComplexBooleanExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression. Inspection ID: OverlyComplexArithmeticExpressionJS",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\nInspection ID: OverlyComplexArithmeticExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`' Inspection ID: ES6RedundantNestingInTemplateLiteral",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n\nInspection ID: ES6RedundantNestingInTemplateLiteral"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantNestingInTemplateLiteral",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded. Inspection ID: StringLiteralBreaksHTMLJS",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.\n\nInspection ID: StringLiteralBreaksHTMLJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringLiteralBreaksHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function. Inspection ID: NestingDepthJS",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function.\n\nInspection ID: NestingDepthJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyNestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. 'class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}' Inspection ID: TypeScriptSuspiciousConstructorParameterAssignment",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n\nInspection ID: TypeScriptSuspiciousConstructorParameterAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSuspiciousConstructorParameterAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()' Inspection ID: ChainedFunctionCallJS",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`\n\nInspection ID: ChainedFunctionCallJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'\n Inspection ID: DuplicateConditionJS",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\nInspection ID: DuplicateConditionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateConditionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())' Inspection ID: NestedFunctionCallJS",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`\n\nInspection ID: NestedFunctionCallJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'\n Inspection ID: TrivialIfJS",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n\nInspection ID: TrivialIfJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'. Inspection ID: JSEqualityComparisonWithCoercion",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`.\n\nInspection ID: JSEqualityComparisonWithCoercion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored. Inspection ID: CommaExpressionJS",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored.\n\nInspection ID: CommaExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommaExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored. Inspection ID: JSCheckFunctionSignatures",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored.\n\nInspection ID: JSCheckFunctionSignatures"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSCheckFunctionSignatures",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons. Inspection ID: ConstantOnLHSOfComparisonJS",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.\n\nInspection ID: ConstantOnLHSOfComparisonJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnLefSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored. Inspection ID: AssignmentResultUsedJS",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored.\n\nInspection ID: AssignmentResultUsedJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details. Inspection ID: ES6BindWithArrowFunction",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details.\n\nInspection ID: ES6BindWithArrowFunction"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6BindWithArrowFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons. Inspection ID: ConstantOnRHSOfComparisonJS",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.\n\nInspection ID: ConstantOnRHSOfComparisonJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnRightSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'. Inspection ID: JSComparisonWithNaN",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`.\n\nInspection ID: JSComparisonWithNaN"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSComparisonWithNaN",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon. Inspection ID: JSUnnecessarySemicolon",
                  "markdown": "Reports an unneeded semicolon.\n\nInspection ID: JSUnnecessarySemicolon"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnnecessarySemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label. Inspection ID: UnnecessaryLabelJS",
                  "markdown": "Reports an unused label.\n\nInspection ID: UnnecessaryLabelJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected. Inspection ID: JSBitwiseOperatorUsage",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected.\n\nInspection ID: JSBitwiseOperatorUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSBitwiseOperatorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved TypeScript reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in TypeScript code. Inspection ID: TypeScriptUnresolvedReference",
                  "markdown": "Reports an unresolved reference in TypeScript code.\n\nInspection ID: TypeScriptUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in JavaScript code. Inspection ID: JSUnresolvedReference",
                  "markdown": "Reports an unresolved reference in JavaScript code.\n\nInspection ID: JSUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedReference",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode. Inspection ID: JSNonStrictModeUsed",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode.\n\nInspection ID: JSNonStrictModeUsed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonStrictModeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces. Inspection ID: ES6RedundantAwait",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces).\n\nInspection ID: ES6RedundantAwait"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent. Inspection ID: NestedSwitchStatementJS",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent.\n\nInspection ID: NestedSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages. Inspection ID: UnterminatedStatementJS",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.\n\nInspection ID: UnterminatedStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnterminatedStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform' Inspection ID: PlatformDetectionJS",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`\n\nInspection ID: PlatformDetectionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PlatformDetectionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error. Inspection ID: IfStatementWithIdenticalBranchesJS",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error.\n\nInspection ID: IfStatementWithIdenticalBranchesJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error. Inspection ID: AssignmentToFunctionParameterJS",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\nInspection ID: AssignmentToFunctionParameterJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToFunctionParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one. Inspection ID: JSConsecutiveCommasInArrayLiteral",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.\n\nInspection ID: JSConsecutiveCommasInArrayLiteral"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSConsecutiveCommasInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'. Inspection ID: FallThroughInSwitchStatementJS",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`.\n\nInspection ID: FallThroughInSwitchStatementJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FallThroughInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs. Inspection ID: CallerJS",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.\n\nInspection ID: CallerJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallerJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit. Inspection ID: TypeScriptExplicitMemberType",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.\n\nInspection ID: TypeScriptExplicitMemberType"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptExplicitMemberType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error. Inspection ID: JSDuplicateCaseLabel",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error.\n\nInspection ID: JSDuplicateCaseLabel"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicateCaseLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}' Inspection ID: JSUnreachableSwitchBranches",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n\nInspection ID: JSUnreachableSwitchBranches"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnreachableSwitchBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition' Inspection ID: TrivialConditionalJS",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n\nInspection ID: TrivialConditionalJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection. Inspection ID: TypeScriptDuplicateUnionOrIntersectionType",
                  "markdown": "Reports a duplicate type inside a union or intersection.\n\nInspection ID: TypeScriptDuplicateUnionOrIntersectionType"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptDuplicateUnionOrIntersectionType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type. Inspection ID: JSMissingSwitchBranches",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type.\n\nInspection ID: JSMissingSwitchBranches"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchBranches",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one. Inspection ID: ES6UnusedImports",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one.\n\nInspection ID: ES6UnusedImports"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6UnusedImports",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs. Inspection ID: InnerHTMLJS",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.\n\nInspection ID: InnerHTMLJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally. Inspection ID: JSSwitchVariableDeclarationIssue",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally.\n\nInspection ID: JSSwitchVariableDeclarationIssue"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSwitchVariableDeclarationIssue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression. Inspection ID: VoidExpressionJS",
                  "markdown": "Reports a `void` expression.\n\nInspection ID: VoidExpressionJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VoidExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional). Inspection ID: JSJQueryEfficiency",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).\n\nInspection ID: JSJQueryEfficiency"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSJQueryEfficiency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '=='). Inspection ID: JSAssignmentUsedAsCondition",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`).\n\n\nInspection ID: JSAssignmentUsedAsCondition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAssignmentUsedAsCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error Inspection ID: UnreachableCodeJS",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error\n\nInspection ID: UnreachableCodeJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions. Inspection ID: ForLoopReplaceableByWhileJS",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions.\n\nInspection ID: ForLoopReplaceableByWhileJS"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByWhile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'. Inspection ID: JSSuspiciousEqPlus",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`.\n\nInspection ID: JSSuspiciousEqPlus"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousEqPlus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported. Inspection ID: EmptyStatementBodyJS",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported.\n\nInspection ID: EmptyStatementBodyJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StatementWithEmptyBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions Inspection ID: JSVoidFunctionReturnValueUsed",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions\n\nInspection ID: JSVoidFunctionReturnValueUsed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSVoidFunctionReturnValueUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration. Inspection ID: JSUnusedLocalSymbols",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.\n\nInspection ID: JSUnusedLocalSymbols"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedLocalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging. Inspection ID: ReturnFromFinallyBlockJS",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging.\n\nInspection ID: ReturnFromFinallyBlockJS"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored. Inspection ID: JSValidateTypes",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored.\n\nInspection ID: JSValidateTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSValidateTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'. Inspection ID: EditorConfigCharClassRedundancy",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`.\n\nInspection ID: EditorConfigCharClassRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed. Inspection ID: EditorConfigRootDeclarationUniqueness",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.\n\nInspection ID: EditorConfigRootDeclarationUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues. Inspection ID: EditorConfigNumerousWildcards",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.\n\nInspection ID: EditorConfigNumerousWildcards"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigNumerousWildcards",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”. Inspection ID: EditorConfigPartialOverride",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\".\n\nInspection ID: EditorConfigPartialOverride"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigPartialOverride",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties. Inspection ID: EditorConfigEmptySection",
                  "markdown": "Reports sections that do not contain any EditorConfig properties.\n\nInspection ID: EditorConfigEmptySection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptySection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored. Inspection ID: EditorConfigShadowingOption",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored.\n\nInspection ID: EditorConfigShadowingOption"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowingOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified. Inspection ID: EditorConfigListAcceptability",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.\n\nInspection ID: EditorConfigListAcceptability"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigListAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins. Inspection ID: EditorConfigKeyCorrectness",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins.\n\nInspection ID: EditorConfigKeyCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigKeyCorrectness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'. Inspection ID: EditorConfigPatternEnumerationRedundancy",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`.\n\nInspection ID: EditorConfigPatternEnumerationRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternEnumerationRedundancy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file. Inspection ID: EditorConfigEncoding",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.\n\nInspection ID: EditorConfigEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file. Inspection ID: EditorConfigRootDeclarationCorrectness",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file.\n\nInspection ID: EditorConfigRootDeclarationCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type. Inspection ID: EditorConfigReferenceCorrectness",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type.\n\nInspection ID: EditorConfigReferenceCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigReferenceCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context. Inspection ID: EditorConfigPairAcceptability",
                  "markdown": "Reports key-value pairs that are not allowed in the current context.\n\nInspection ID: EditorConfigPairAcceptability"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPairAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed. Inspection ID: EditorConfigPatternRedundancy",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed.\n\nInspection ID: EditorConfigPatternRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located. Inspection ID: EditorConfigNoMatchingFiles",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located.\n\nInspection ID: EditorConfigNoMatchingFiles"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigNoMatchingFiles",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported. Inspection ID: EditorConfigDeprecatedDescriptor",
                  "markdown": "Reports EditorConfig properties that are no longer supported.\n\nInspection ID: EditorConfigDeprecatedDescriptor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigDeprecatedDescriptor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed. Inspection ID: EditorConfigWildcardRedundancy",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed.\n\nInspection ID: EditorConfigWildcardRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigWildcardRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections. Inspection ID: EditorConfigHeaderUniqueness",
                  "markdown": "Reports sections that define the same file pattern as other sections.\n\nInspection ID: EditorConfigHeaderUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigHeaderUniqueness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'. Inspection ID: EditorConfigShadowedOption",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`.\n\nInspection ID: EditorConfigShadowedOption"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowedOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'. Inspection ID: EditorConfigEmptyHeader",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`.\n\nInspection ID: EditorConfigEmptyHeader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptyHeader",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them. Inspection ID: EditorConfigValueCorrectness",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.\n\nInspection ID: EditorConfigValueCorrectness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigVerifyByCore",
                "shortDescription": {
                  "text": "Invalid .editorconfig file"
                },
                "fullDescription": {
                  "text": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied. Inspection ID: EditorConfigVerifyByCore",
                  "markdown": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied.\n\nInspection ID: EditorConfigVerifyByCore"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigVerifyByCore",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values. Inspection ID: EditorConfigValueUniqueness",
                  "markdown": "Reports duplicates in lists of values.\n\nInspection ID: EditorConfigValueUniqueness"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information. Inspection ID: EditorConfigMissingRequiredDeclaration",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information.\n\nInspection ID: EditorConfigMissingRequiredDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigMissingRequiredDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'. Inspection ID: EditorConfigCharClassLetterRedundancy",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`.\n\nInspection ID: EditorConfigCharClassLetterRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassLetterRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed. Inspection ID: EditorConfigSpaceInHeader",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.\n\nInspection ID: EditorConfigSpaceInHeader"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigSpaceInHeader",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value. Inspection ID: EditorConfigOptionRedundancy",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value.\n\nInspection ID: EditorConfigOptionRedundancy"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigOptionRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed. Inspection ID: EditorConfigUnusedDeclaration",
                  "markdown": "Reports unused declarations. Such declarations can be removed.\n\nInspection ID: EditorConfigUnusedDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnusedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists. Inspection ID: EditorConfigUnexpectedComma",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.\n\nInspection ID: EditorConfigUnexpectedComma"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnexpectedComma",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.restClient",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "HttpRequestCustomHttpMethodInspection",
                "shortDescription": {
                  "text": "Unknown HTTP method"
                },
                "fullDescription": {
                  "text": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings. Inspection ID: HttpRequestCustomHttpMethodInspection",
                  "markdown": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings.\n\nInspection ID: HttpRequestCustomHttpMethodInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestCustomHttpMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorJsonBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in JSON body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected JSON body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorJsonBodyInspection",
                  "markdown": "Reports possible requests in injected JSON body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorJsonBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorJsonBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientRunRequestNameInspection",
                "shortDescription": {
                  "text": "Possible request name"
                },
                "fullDescription": {
                  "text": "Highlights request name in run block which has no specified import file. Suggests adding import for the file which contains this named request. Inspection ID: HttpClientRunRequestNameInspection",
                  "markdown": "Highlights request name in run block which has no specified import file. Suggests adding import for the file which contains this named request.\n\nInspection ID: HttpClientRunRequestNameInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientRunRequestNameInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestWhitespaceInsideRequestTargetPath",
                "shortDescription": {
                  "text": "Whitespace in URL in request"
                },
                "fullDescription": {
                  "text": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action. Inspection ID: HttpRequestWhitespaceInsideRequestTargetPath",
                  "markdown": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.\n\nInspection ID: HttpRequestWhitespaceInsideRequestTargetPath"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestWhitespaceInsideRequestTargetPath",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedAuthId",
                "shortDescription": {
                  "text": "Unresolved Auth identifier"
                },
                "fullDescription": {
                  "text": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment. Inspection ID: HttpClientUnresolvedAuthId",
                  "markdown": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.\n\nInspection ID: HttpClientUnresolvedAuthId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedAuthId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestAmbiguityEncoding",
                "shortDescription": {
                  "text": "Ambiguity Encoding Inspection"
                },
                "fullDescription": {
                  "text": "Detects '+' in an encoded query string. It is ambiguous whether it should be encoded as space or as a '+' character. Example: 'GET https://example.com/api?name=John+Doe%40example.com' After the quick-fix is applied 'GET https://example.com/api?name=John%20Doe%40example.com' Inspection ID: HttpRequestAmbiguityEncoding",
                  "markdown": "Detects '+' in an encoded query string. It is ambiguous whether it should be encoded as space or as a '+' character.\n\n**Example:**\n\n\n      GET https://example.com/api?name=John+Doe%40example.com\n\nAfter the quick-fix is applied\n\n\n      GET https://example.com/api?name=John%20Doe%40example.com\n\nInspection ID: HttpRequestAmbiguityEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestAmbiguityEncoding",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                "shortDescription": {
                  "text": "Auth configuration validation"
                },
                "fullDescription": {
                  "text": "Reports Auth configuration the following problems in HTTP Client environment files: Missing properties in Auth configuration Auth/Security configuration placed in private environment file Inspection ID: HttpRequestEnvironmentAuthConfigurationValidationInspection",
                  "markdown": "Reports Auth configuration the following problems in HTTP Client environment files:\n\n* Missing properties in Auth configuration\n* Auth/Security configuration placed in private environment file\n\nInspection ID: HttpRequestEnvironmentAuthConfigurationValidationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestContentLengthIsIgnored",
                "shortDescription": {
                  "text": "Redundant 'Content-Length'"
                },
                "fullDescription": {
                  "text": "Reports an explicitly set 'Content-Length' header. The header is redundant because HTTP Client uses the actual request body length. Inspection ID: HttpRequestContentLengthIsIgnored",
                  "markdown": "Reports an explicitly set `Content-Length` header. The header is redundant because HTTP Client uses the actual request body length.\n\nInspection ID: HttpRequestContentLengthIsIgnored"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestContentLengthIsIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorXmlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in HTML/XML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected XML/HTML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorXmlBodyInspection",
                  "markdown": "Reports possible requests in injected XML/HTML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorXmlBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorXmlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectHttpHeaderInspection",
                "shortDescription": {
                  "text": "Incorrect HTTP header"
                },
                "fullDescription": {
                  "text": "Reports unknown HTTP headers that do not match any publicly known headers. The quick fix suggests adding the header to the list of custom headers when the Use custom HTTP headers option is enabled. HTTP headers from the list of custom headers will not trigger the inspection. Inspection ID: IncorrectHttpHeaderInspection",
                  "markdown": "Reports unknown HTTP headers that do not match any [publicly\nknown headers](https://www.iana.org/assignments/message-headers/message-headers.xml). The quick fix suggests adding the header to the list of custom headers when the **Use custom HTTP headers** option\nis enabled. HTTP headers from the list of custom headers will not trigger the inspection.\n\nInspection ID: IncorrectHttpHeaderInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectHttpHeaderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientInappropriateProtocolUsageInspection",
                "shortDescription": {
                  "text": "Inappropriate HTTP Protocol usage"
                },
                "fullDescription": {
                  "text": "Reports inappropriate usage of HTTP protocol keyword, e.g. 'HTTP/2', with non-HTTP method requests. Such a usage will be ignored. Inspection ID: HttpClientInappropriateProtocolUsageInspection",
                  "markdown": "Reports inappropriate usage of HTTP protocol keyword, e.g. `HTTP/2`, with non-HTTP method requests. Such a usage will be ignored.\n\nInspection ID: HttpClientInappropriateProtocolUsageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientInappropriateProtocolUsageInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestPlaceholder",
                "shortDescription": {
                  "text": "'$placeholder' in HTTP Request"
                },
                "fullDescription": {
                  "text": "Reports a '$placeholder' inside a request. A '$placeholder' to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping '/aaaa/*/bbb' will be generated as 'GET localhost/aaaa/{{$placeholder}}/bbb'. Inspection ID: HttpRequestPlaceholder",
                  "markdown": "Reports a `$placeholder` inside a request.\n\nA `$placeholder` to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping `/aaaa/*/bbb` will be generated as `GET localhost/aaaa/{{$placeholder}}/bbb`.\n\nInspection ID: HttpRequestPlaceholder"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestPlaceholder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved environment variable"
                },
                "fullDescription": {
                  "text": "Reports variables undeclared in the current environment HTTP Client. Executing requests with undeclared variables probably fail. Consider adding a variable to the environment or selecting an environment with this variable. Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body. Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via 'client.global.set' or 'request.variables.set' functions call. Inspection ID: HttpClientUnresolvedVariable",
                  "markdown": "Reports variables undeclared in the current environment HTTP Client.\n\n\nExecuting requests with undeclared variables probably fail.\nConsider adding a variable to the environment or selecting an environment with this variable.\n\nInspection doesn't report variables in request bodies, because it can be a valid syntax of the body.\n\n\nSome variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via\n`client.global.set` or `request.variables.set` functions call.\n\nInspection ID: HttpClientUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorYamlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in YAML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected YAML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request. Inspection ID: HttpRequestRequestSeparatorYamlBodyInspection",
                  "markdown": "Reports possible requests in injected YAML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request.\n\nInspection ID: HttpRequestRequestSeparatorYamlBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorYamlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpUrlsUsage",
                "shortDescription": {
                  "text": "Link with unencrypted protocol"
                },
                "fullDescription": {
                  "text": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS, instead. See HTTPS: Difference from HTTP (wikipedia.org). Inspection ID: HttpUrlsUsage",
                  "markdown": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks\nare dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,\ninstead.\n\nSee [HTTPS: Difference from HTTP (wikipedia.org)](https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP).\n\nInspection ID: HttpUrlsUsage"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpUrlsUsage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientDuplicateImportInspection",
                "shortDescription": {
                  "text": "Duplicate import"
                },
                "fullDescription": {
                  "text": "Highlights already defined import. Suggests removing duplicated import definition. Inspection ID: HttpClientDuplicateImportInspection",
                  "markdown": "Highlights already defined import. Suggests removing duplicated import definition.\n\nInspection ID: HttpClientDuplicateImportInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientDuplicateImportInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestJsonBodyInspection",
                "shortDescription": {
                  "text": "Variable should be double-quoted"
                },
                "fullDescription": {
                  "text": "Reports variables which should be double-quoted in json body. The quick fix suggests wrap variable with double quotes '\"{{variable}}\"'. Inspection ID: HttpRequestJsonBodyInspection",
                  "markdown": "Reports variables which should be double-quoted in json body. The quick fix suggests wrap variable with double quotes `\"{{variable}}\"`.\n\nInspection ID: HttpRequestJsonBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestJsonBodyInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "AngularJS",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "AngularNgOptimizedImage",
                "shortDescription": {
                  "text": "Issues with ngSrc usage in img tags"
                },
                "fullDescription": {
                  "text": "Reports issues related to usage of 'ngSrc' (NgOptimizedDirective) on 'img' tags. Following issues are reported: 'img' tags, which use 'src' instead of 'ngSrc' lack of 'width' and 'height', or 'fill' attributes when 'ngSrc' is used 'width' or 'height', and 'fill' attributes being present on the same element when 'ngSrc' is used Inspection ID: AngularNgOptimizedImage",
                  "markdown": "Reports issues related to usage of `ngSrc` ([NgOptimizedDirective](https://angular.io/guide/image-directive)) on `img` tags.\n\n\nFollowing issues are reported:\n\n* `img` tags, which use `src` instead of `ngSrc`\n* lack of `width` and `height`, or `fill` attributes when `ngSrc` is used\n* `width` or `height`, and `fill` attributes being present on the same element when `ngSrc` is used\n\nInspection ID: AngularNgOptimizedImage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AngularNgOptimizedImage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectBlockUsage",
                "shortDescription": {
                  "text": "Incorrect usage of Angular block"
                },
                "fullDescription": {
                  "text": "Reports problems with Angular blocks. Inspection ID: AngularIncorrectBlockUsage",
                  "markdown": "Reports problems with Angular blocks.\n\nInspection ID: AngularIncorrectBlockUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectBlockUsage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidTemplateReferenceVariable",
                "shortDescription": {
                  "text": "Unbound or ambiguous template reference variable"
                },
                "fullDescription": {
                  "text": "Reports a template reference variable that is not assigned to a directive when using 'exportAs' or is assigned to multiple directives. Inspection ID: AngularInvalidTemplateReferenceVariable",
                  "markdown": "Reports a template reference variable that is not assigned to a directive when using `exportAs` or is assigned to multiple directives.\n\nInspection ID: AngularInvalidTemplateReferenceVariable"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidTemplateReferenceVariable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMultipleStructuralDirectives",
                "shortDescription": {
                  "text": "Multiple structural directives on one element"
                },
                "fullDescription": {
                  "text": "Reports multiple structural directives ('*ngIf', '*ngFor', etc.) on one element. Inspection ID: AngularMultipleStructuralDirectives",
                  "markdown": "Reports multiple structural directives (`*ngIf`, `*ngFor`, etc.) on one element.\n\nInspection ID: AngularMultipleStructuralDirectives"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMultipleStructuralDirectives",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnresolvedPipe",
                "shortDescription": {
                  "text": "Unresolved pipe"
                },
                "fullDescription": {
                  "text": "Reports an unresolved pipe. Inspection ID: AngularUnresolvedPipe",
                  "markdown": "Reports an unresolved pipe.\n\nInspection ID: AngularUnresolvedPipe"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnresolvedPipe",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularCliAddDependency",
                "shortDescription": {
                  "text": "Angular CLI add dependency"
                },
                "fullDescription": {
                  "text": "Suggests using the 'ng add' command to install the dependency. 'ng add' will use the package manager to download it and invoke a schematic which can update your project with configuration changes, add additional dependencies (e.g. polyfills), or scaffold package-specific initialization code. Inspection ID: AngularCliAddDependency",
                  "markdown": "Suggests using the `ng add` command to install the dependency.\n\n`ng add` will use the package manager to download it and invoke a schematic\nwhich can update your project with configuration changes, add additional dependencies (e.g. polyfills),\nor scaffold package-specific initialization code.\n\nInspection ID: AngularCliAddDependency"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularCliAddDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularDeferBlockOnTrigger",
                "shortDescription": {
                  "text": "Problems with @defer `on` triggers"
                },
                "fullDescription": {
                  "text": "Reports issues with triggers in `on` parameters in `@defer` block. Inspection ID: AngularDeferBlockOnTrigger",
                  "markdown": "Reports issues with triggers in \\`on\\` parameters in \\`@defer\\` block.\n\nInspection ID: AngularDeferBlockOnTrigger"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularDeferBlockOnTrigger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInaccessibleSymbol",
                "shortDescription": {
                  "text": "Inaccessible component member or directive input"
                },
                "fullDescription": {
                  "text": "Reports access to invisible (private or protected) component member or directive input from an Angular template. Inspection ID: AngularInaccessibleSymbol",
                  "markdown": "Reports access to invisible (private or protected) component member or directive input from an Angular template.\n\nInspection ID: AngularInaccessibleSymbol"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInaccessibleSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingEventHandler",
                "shortDescription": {
                  "text": "Missing event handler"
                },
                "fullDescription": {
                  "text": "Reports a missing event handler statement for an event binding. Inspection ID: AngularMissingEventHandler",
                  "markdown": "Reports a missing event handler statement for an event binding.\n\nInspection ID: AngularMissingEventHandler"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingEventHandler",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnusedComponentImport",
                "shortDescription": {
                  "text": "Unused import in an Angular component declaration"
                },
                "fullDescription": {
                  "text": "Reports unused imports in Angular components. Inspection ID: AngularUnusedComponentImport",
                  "markdown": "Reports unused imports in Angular components.\n\nInspection ID: AngularUnusedComponentImport"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnusedComponentImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedTag",
                "shortDescription": {
                  "text": "Undefined tag"
                },
                "fullDescription": {
                  "text": "Reports a tag defined by a component or directive out of the current scope. Inspection ID: AngularUndefinedTag",
                  "markdown": "Reports a tag defined by a component or directive out of the current scope.\n\nInspection ID: AngularUndefinedTag"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedBinding",
                "shortDescription": {
                  "text": "Undefined binding"
                },
                "fullDescription": {
                  "text": "Reports an undefined property, event, or structural directive bindings on elements. Inspection ID: AngularUndefinedBinding",
                  "markdown": "Reports an undefined property, event, or structural directive bindings on elements.\n\nInspection ID: AngularUndefinedBinding"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidImportedOrDeclaredSymbol",
                "shortDescription": {
                  "text": "Invalid imported or declared symbol"
                },
                "fullDescription": {
                  "text": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can’t be used in the context of the property. Inspection ID: AngularInvalidImportedOrDeclaredSymbol",
                  "markdown": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can't be used in the context of the property.\n\nInspection ID: AngularInvalidImportedOrDeclaredSymbol"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidImportedOrDeclaredSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIllegalForLoopTrackAccess",
                "shortDescription": {
                  "text": "Illegal @for loop access"
                },
                "fullDescription": {
                  "text": "Reports illegal access to the template variable within '@for' loop 'track' expression. Inspection ID: AngularIllegalForLoopTrackAccess",
                  "markdown": "Reports illegal access to the template variable within `@for` loop `track` expression.\n\nInspection ID: AngularIllegalForLoopTrackAccess"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIllegalForLoopTrackAccess",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularAmbiguousComponentTag",
                "shortDescription": {
                  "text": "Ambiguous component tag"
                },
                "fullDescription": {
                  "text": "Reports a component that is matched on an embedded template element '<ng-template>' or multiple components matched on any other element. Inspection ID: AngularAmbiguousComponentTag",
                  "markdown": "Reports a component that is matched on an embedded template element `<ng-template>` or multiple components matched on any other element.\n\nInspection ID: AngularAmbiguousComponentTag"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularAmbiguousComponentTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedModuleExport",
                "shortDescription": {
                  "text": "Undefined export from Angular module"
                },
                "fullDescription": {
                  "text": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module. Inspection ID: AngularUndefinedModuleExport",
                  "markdown": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.\n\nInspection ID: AngularUndefinedModuleExport"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedModuleExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidI18nAttribute",
                "shortDescription": {
                  "text": "Invalid i18n attribute"
                },
                "fullDescription": {
                  "text": "Reports a problem with a 'i18n-*' attribute. Inspection ID: AngularInvalidI18nAttribute",
                  "markdown": "Reports a problem with a `i18n-*` attribute.\n\nInspection ID: AngularInvalidI18nAttribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInvalidI18nAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularForBlockNonIterableVar",
                "shortDescription": {
                  "text": "Non-iterable type in @for block"
                },
                "fullDescription": {
                  "text": "Reports that the type of variable to iterate over does not have '[Symbol.iterator]()' method, which returns an iterator. Inspection ID: AngularForBlockNonIterableVar",
                  "markdown": "Reports that the type of variable to iterate over does not have `[Symbol.iterator]()` method, which returns an iterator.\n\nInspection ID: AngularForBlockNonIterableVar"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularForBlockNonIterableVar",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectTemplateDefinition",
                "shortDescription": {
                  "text": "Incorrect component template definition"
                },
                "fullDescription": {
                  "text": "Reports a component that doesn’t have an associated template or uses both 'template' and 'templateUrl' properties. Inspection ID: AngularIncorrectTemplateDefinition",
                  "markdown": "Reports a component that doesn't have an associated template or uses both `template` and `templateUrl` properties.\n\nInspection ID: AngularIncorrectTemplateDefinition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectTemplateDefinition",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectLetUsage",
                "shortDescription": {
                  "text": "Incorrect usage of @let declaration"
                },
                "fullDescription": {
                  "text": "Reports problems with @let declaration usages. Inspection ID: AngularIncorrectLetUsage",
                  "markdown": "Reports problems with @let declaration usages.\n\nInspection ID: AngularIncorrectLetUsage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectLetUsage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonStandaloneComponentImports",
                "shortDescription": {
                  "text": "Invalid usage of imports in non-standalone components"
                },
                "fullDescription": {
                  "text": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components. Inspection ID: AngularNonStandaloneComponentImports",
                  "markdown": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.\n\nInspection ID: AngularNonStandaloneComponentImports"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonStandaloneComponentImports",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingOrInvalidDeclarationInModule",
                "shortDescription": {
                  "text": "Missing or invalid component, directive or pipe declaration in a module"
                },
                "fullDescription": {
                  "text": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules. Inspection ID: AngularMissingOrInvalidDeclarationInModule",
                  "markdown": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.\n\nInspection ID: AngularMissingOrInvalidDeclarationInModule"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingOrInvalidDeclarationInModule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidAnimationTriggerAssignment",
                "shortDescription": {
                  "text": "Invalid animation trigger assignment"
                },
                "fullDescription": {
                  "text": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use '[@triggerName]=\"expression\"' or an attribute without a value '@triggerName'. Inspection ID: AngularInvalidAnimationTriggerAssignment",
                  "markdown": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use `[@triggerName]=\"expression\"` or an attribute without a value `@triggerName`.\n\nInspection ID: AngularInvalidAnimationTriggerAssignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidAnimationTriggerAssignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidEntryComponent",
                "shortDescription": {
                  "text": "Invalid entry component"
                },
                "fullDescription": {
                  "text": "Reports an invalid Angular component specified in the module’s 'bootstrap' or 'entryComponents' property. Inspection ID: AngularInvalidEntryComponent",
                  "markdown": "Reports an invalid Angular component specified in the module's `bootstrap` or `entryComponents` property.\n\nInspection ID: AngularInvalidEntryComponent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidEntryComponent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularRecursiveModuleImportExport",
                "shortDescription": {
                  "text": "Recursive import or export of an Angular module or a standalone component"
                },
                "fullDescription": {
                  "text": "Reports a cyclic dependency between Angular modules or standalone components. Inspection ID: AngularRecursiveModuleImportExport",
                  "markdown": "Reports a cyclic dependency between Angular modules or standalone components.\n\nInspection ID: AngularRecursiveModuleImportExport"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularRecursiveModuleImportExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidSelector",
                "shortDescription": {
                  "text": "Missing or invalid selector"
                },
                "fullDescription": {
                  "text": "Reports an invalid 'selector' property of a component or directive. Inspection ID: AngularInvalidSelector",
                  "markdown": "Reports an invalid `selector` property of a component or directive.\n\nInspection ID: AngularInvalidSelector"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularBindingTypeMismatch",
                "shortDescription": {
                  "text": "Invalid binding type"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between actual and expected directive binding type. Inspection ID: AngularBindingTypeMismatch",
                  "markdown": "Reports a mismatch between actual and expected directive binding type.\n\nInspection ID: AngularBindingTypeMismatch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularBindingTypeMismatch",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonEmptyNgContent",
                "shortDescription": {
                  "text": "Content inside <ng-content> tag"
                },
                "fullDescription": {
                  "text": "Reports a text or tag occurrence inside a '<ng-content>' tag used for content projection. Inspection ID: AngularNonEmptyNgContent",
                  "markdown": "Reports a text or tag occurrence inside a `<ng-content>` tag used for content projection.\n\nInspection ID: AngularNonEmptyNgContent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonEmptyNgContent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnsupportedSyntax",
                "shortDescription": {
                  "text": "Unsupported Angular expression syntax"
                },
                "fullDescription": {
                  "text": "Reports problems with Angular expression syntax, which is not supported in an older version of Angular. Inspection ID: AngularUnsupportedSyntax",
                  "markdown": "Reports problems with Angular expression syntax, which is not supported in an older version of Angular.\n\nInspection ID: AngularUnsupportedSyntax"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnsupportedSyntax",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingRequiredDirectiveInputBinding",
                "shortDescription": {
                  "text": "Missing required directive input"
                },
                "fullDescription": {
                  "text": "Reports a missing binding for a required directive input. Inspection ID: AngularMissingRequiredDirectiveInputBinding",
                  "markdown": "Reports a missing binding for a required directive input.\n\nInspection ID: AngularMissingRequiredDirectiveInputBinding"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingRequiredDirectiveInputBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInsecureBindingToEvent",
                "shortDescription": {
                  "text": "Insecure binding to event"
                },
                "fullDescription": {
                  "text": "Reports a binding to an event property or attribute, for example, '[onclick]' or '[attr.onclick]' instead of '(click)'. Inspection ID: AngularInsecureBindingToEvent",
                  "markdown": "Reports a binding to an event property or attribute, for example, `[onclick]` or `[attr.onclick]` instead of `(click)`.\n\nInspection ID: AngularInsecureBindingToEvent"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInsecureBindingToEvent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.postcss",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "PostCssCustomSelector",
                "shortDescription": {
                  "text": "Invalid custom selector"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in PostCSS Custom Selector. Example: '@custom-selector :--heading h1, h2, h3;' Inspection ID: PostCssCustomSelector",
                  "markdown": "Reports a syntax error in [PostCSS Custom Selector](https://github.com/postcss/postcss-custom-selectors).\n\nExample:\n\n\n    @custom-selector :--heading h1, h2, h3;\n\nInspection ID: PostCssCustomSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssUnresolvedModuleValueReference",
                "shortDescription": {
                  "text": "Unresolved CSS module value"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a CSS Module Value ('@value' declaration). Example: '@value foo from unknown;' Inspection ID: PostCssUnresolvedModuleValueReference",
                  "markdown": "Reports an unresolved reference to a [CSS Module Value](https://github.com/css-modules/postcss-modules-values) (`@value` declaration).\n\nExample:\n\n\n    @value foo from unknown;\n\nInspection ID: PostCssUnresolvedModuleValueReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssUnresolvedModuleValueReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssNesting",
                "shortDescription": {
                  "text": "Invalid nested rule"
                },
                "fullDescription": {
                  "text": "Reports a nested style rule whose syntax doesn't comply with the PostCSS Nested or the PostCSS Nesting specification. Example: '.phone {\n  &_title {}\n}' Inspection ID: PostCssNesting",
                  "markdown": "Reports a nested style rule whose syntax doesn't comply with the [PostCSS Nested](https://github.com/postcss/postcss-nested) or the [PostCSS Nesting](https://github.com/csstools/postcss-nesting) specification.\n\nExample:\n\n\n    .phone {\n      &_title {}\n    }\n\nInspection ID: PostCssNesting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PostCssNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssCustomMedia",
                "shortDescription": {
                  "text": "Invalid custom media"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in a PostCSS Custom Media query. Example: '@custom-media --small-viewport (max-width: 30em);' Inspection ID: PostCssCustomMedia",
                  "markdown": "Reports a syntax error in a [PostCSS Custom Media](https://github.com/postcss/postcss-custom-media) query.\n\nExample:\n\n\n    @custom-media --small-viewport (max-width: 30em);\n\nInspection ID: PostCssCustomMedia"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomMedia",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssMediaRange",
                "shortDescription": {
                  "text": "Invalid media query range"
                },
                "fullDescription": {
                  "text": "Checks range context syntax, which may alternatively be used for media features with a 'range' type. Example: '@media screen and (500px <= width <= 1200px) {}' Inspection ID: PostCssMediaRange",
                  "markdown": "Checks [range context](https://github.com/postcss/postcss-media-minmax) syntax, which may alternatively be used for media features with a 'range' type.\n\nExample:\n\n\n    @media screen and (500px <= width <= 1200px) {}\n\nInspection ID: PostCssMediaRange"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssMediaRange",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.sass",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "SassScssUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS mixin reference. Example: '* {\n  @include unknown-mixin;\n}' Inspection ID: SassScssUnresolvedMixin",
                  "markdown": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n\nInspection ID: SassScssUnresolvedMixin"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly imported in the current file. Example: '* {\n  margin: $var-in-other-file;\n}' Inspection ID: SassScssResolvedByNameOnly",
                  "markdown": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n\nInspection ID: SassScssResolvedByNameOnly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SassScssResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedPlaceholderSelector",
                "shortDescription": {
                  "text": "Unresolved placeholder selector"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS placeholder selector reference. Example: '* {\n  @extend %unknown-placeholder-selector;\n}' Inspection ID: SassScssUnresolvedPlaceholderSelector",
                  "markdown": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n\nInspection ID: SassScssUnresolvedPlaceholderSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedPlaceholderSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS variable reference. Example: '* {\n  margin: $unknown-var;\n}' Inspection ID: SassScssUnresolvedVariable",
                  "markdown": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n\nInspection ID: SassScssUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool. Inspection ID: ShellCheck",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool.\n\nInspection ID: ShellCheck"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ShellCheck",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Karma",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "KarmaConfigFile",
                "shortDescription": {
                  "text": "Invalid Karma configuration file"
                },
                "fullDescription": {
                  "text": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, 'karma.conf.js'. Inspection ID: KarmaConfigFile",
                  "markdown": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`.\n\nInspection ID: KarmaConfigFile"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "KarmaConfigFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.modules.json",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'. Inspection ID: JsonSchemaDeprecation",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.\n\nInspection ID: JsonSchemaDeprecation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JsonSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema. Inspection ID: JsonSchemaRefReference",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  \n\nInspection ID: JsonSchemaRefReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaRefReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file. Inspection ID: Json5StandardCompliance",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file.\n\nInspection ID: Json5StandardCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Json5StandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal. Inspection ID: JsonDuplicatePropertyKeys",
                  "markdown": "Reports a duplicate key in an object literal.\n\nInspection ID: JsonDuplicatePropertyKeys"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it. Inspection ID: JsonSchemaCompliance",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  \n\nInspection ID: JsonSchemaCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaCompliance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable). Inspection ID: JsonStandardCompliance",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).\n\nInspection ID: JsonStandardCompliance"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JsonStandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()' Inspection ID: MongoJSSideEffectsInspection",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n\nInspection ID: MongoJSSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file. Inspection ID: MysqlLoadDataPathInspection",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file.\n\nInspection ID: MysqlLoadDataPathInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlLoadDataPath",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that may cause side effects while the data source is in read-only mode. The quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()' Inspection ID: MongoJSExtSideEffectsInspection",
                  "markdown": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n\nInspection ID: MongoJSExtSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default. Example (MySQL): 'SELECT MAX (qty) FROM orders;' Inspection ID: MysqlSpaceAfterFunctionNameInspection",
                  "markdown": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n\nInspection ID: MysqlSpaceAfterFunctionNameInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MysqlSpaceAfterFunctionName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinCountInspection",
                "shortDescription": {
                  "text": "Excessive JOIN count"
                },
                "fullDescription": {
                  "text": "Reports queries with excessive number of JOINS. Using too many joins is generally not recommended for performance reasons. 'SELECT * FROM a inner join b using(id) inner join c using (id) inner join d using (id) inner join e using (id)' Inspection ID: SqlJoinCountInspection",
                  "markdown": "Reports queries with excessive number of JOINS.\n\nUsing too many joins is generally\nnot recommended for performance reasons.\n\n    SELECT * FROM a inner join b using(id) inner join c using (id) inner join d using (id) inner join e using (id)\n\nInspection ID: SqlJoinCountInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlJoinCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;' Inspection ID: SqlMissingReturnInspection",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n\nInspection ID: SqlMissingReturnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlMissingReturn",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out. Inspection ID: SqlUnusedSubqueryItemInspection",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out.\n\nInspection ID: SqlUnusedSubqueryItemInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action. Inspection ID: SqlCaseVsIfInspection",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action.\n\nInspection ID: SqlCaseVsIfInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsIf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;' Inspection ID: SqlShouldBeInGroupByInspection",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n\nInspection ID: SqlShouldBeInGroupByInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShouldBeInGroupBy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);' Inspection ID: SqlAutoIncrementDuplicateInspection",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n\nInspection ID: SqlAutoIncrementDuplicateInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAutoIncrementDuplicate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' Inspection ID: SqlStringLengthExceededInspection",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nInspection ID: SqlStringLengthExceededInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStringLengthExceeded",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;' Inspection ID: SqlDtInspection",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n\nInspection ID: SqlDtInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDateTime",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode. Inspection ID: SqlSideEffectsInspection",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode.\n\nInspection ID: SqlSideEffectsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' Inspection ID: SqlIllegalCursorStateInspection",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nInspection ID: SqlIllegalCursorStateInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIllegalCursorState",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;' Inspection ID: SqlJoinWithoutOnInspection",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n\nInspection ID: SqlJoinWithoutOnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlJoinWithoutOn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa). Inspection ID: SqlDropIndexedColumnInspection",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa).\n\nInspection ID: SqlDropIndexedColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDropIndexedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;' Inspection ID: SqlCheckUsingColumnsInspection",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n\nInspection ID: SqlCheckUsingColumnsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCheckUsingColumns",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four. Inspection ID: SqlInsertValuesInspection",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four.\n\nInspection ID: SqlInsertValuesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect. Inspection ID: SqlDialectInspection",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect.\n\nInspection ID: SqlDialectInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDialectInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted. Inspection ID: SqlRedundantElseNullInspection",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted.\n\nInspection ID: SqlRedundantElseNullInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantElseNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;' Inspection ID: MysqlParsingInspection",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n\nInspection ID: MysqlParsingInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlParsing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);' Inspection ID: SqlCallNotationInspection",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n\nInspection ID: SqlCallNotationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlCallNotation",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()' Inspection ID: MongoJSExtDeprecationInspection",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n\nInspection ID: MongoJSExtDeprecationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE. Inspection ID: SqlDuplicateColumnInspection",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE.\n\nInspection ID: SqlDuplicateColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDuplicateColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table. Inspection ID: SqlShadowingAliasInspection",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable.\n\nInspection ID: SqlShadowingAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShadowingAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()' Inspection ID: MongoJSDeprecationInspection",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n\nInspection ID: MongoJSDeprecationInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors. Inspection ID: SqlTypeInspection",
                  "markdown": "Reports type-related errors.\n\nInspection ID: SqlTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed. Inspection ID: SqlUnreachableCodeInspection",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed.\n\nInspection ID: SqlUnreachableCodeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnreachable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted. Inspection ID: SqlUnicodeStringLiteralInspection",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted.\n\nInspection ID: SqlUnicodeStringLiteralInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnicodeStringLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSingleSessionModeInspection",
                "shortDescription": {
                  "text": "Create a temporary table without a single session mode"
                },
                "fullDescription": {
                  "text": "Reports temporary tables creation not in the single-session mode. Example (PostgreSQL): 'CREATE TEMPORARY TABLE foo(a INT, b INT);' Inspection ID: SqlSingleSessionModeInspection",
                  "markdown": "Reports temporary tables creation not in the single-session mode.\n\nExample (PostgreSQL):\n\n    CREATE TEMPORARY TABLE foo(a INT, b INT);\n\nInspection ID: SqlSingleSessionModeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSingleSessionMode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database). Inspection ID: SqlNoDataSourceInspection",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database** ).\n\nInspection ID: SqlNoDataSourceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNoDataSourceInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted. Inspection ID: SqlUnusedVariableInspection",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted.\n\nInspection ID: SqlUnusedVariableInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause. Inspection ID: SqlResolveInspection",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause.\n\nInspection ID: SqlResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlResolve",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted. Inspection ID: PgSelectFromProcedureInspection",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted.\n\nInspection ID: PgSelectFromProcedureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PgSelectFromProcedure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes. Inspection ID: SqlCurrentSchemaInspection",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes.\n\nInspection ID: SqlCurrentSchemaInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCurrentSchemaInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' Inspection ID: SqlMisleadingReferenceInspection",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nInspection ID: SqlMisleadingReferenceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMisleadingReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);' Inspection ID: SqlInsertIntoGeneratedColumnInspection",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`\n\nInspection ID: SqlInsertIntoGeneratedColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertIntoGeneratedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);' Inspection ID: SqlRedundantLimitInspection",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n\nInspection ID: SqlRedundantLimitInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantLimit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird'); Inspection ID: SqlInsertNullIntoNotNullInspection",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```\n\nInspection ID: SqlInsertNullIntoNotNullInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertNullIntoNotNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' Inspection ID: SqlDerivedTableAliasInspection",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nInspection ID: SqlDerivedTableAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDerivedTableAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);' Inspection ID: MsBuiltinInspection",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n\nInspection ID: MsBuiltinInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MssqlBuiltin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'. Inspection ID: SqlTriggerTransitionInspection",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`.\n\nInspection ID: SqlTriggerTransitionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTriggerTransition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant. Inspection ID: SqlMultipleLimitClausesInspection",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.\n\nInspection ID: SqlMultipleLimitClausesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMultipleLimitClauses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names. Inspection ID: SqlNamedArgumentsInspection",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names.\n\nInspection ID: SqlNamedArgumentsInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNamedArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page. Inspection ID: SqlCaseVsCoalesceInspection",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page.\n\nInspection ID: SqlCaseVsCoalesceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical. Inspection ID: SqlRedundantAliasInspection",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical.\n\nInspection ID: SqlRedundantAliasInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);' Inspection ID: SqlIdentifierInspection",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n\nInspection ID: SqlIdentifierInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIdentifier",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;' Inspection ID: SqlTransactionStatementInTriggerInspection",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n\nInspection ID: SqlTransactionStatementInTriggerInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTransactionStatementInTrigger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out. Inspection ID: SqlRedundantCodeInCoalesceInspection",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out.\n\nInspection ID: SqlRedundantCodeInCoalesceInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantCodeInCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version. Inspection ID: SqlStorageInspection",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.\n\nInspection ID: SqlStorageInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStorageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;' Inspection ID: MsOrderByInspection",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n\nInspection ID: MsOrderByInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MsOrderBy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct. Inspection ID: SqlSignatureInspection",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct.\n\nInspection ID: SqlSignatureInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant. Inspection ID: SqlRedundantOrderingDirectionInspection",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant.\n\nInspection ID: SqlRedundantOrderingDirectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantOrderingDirection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);' Inspection ID: SqlDeprecateTypeInspection",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n\nInspection ID: SqlDeprecateTypeInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDeprecateType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;' Inspection ID: SqlAggregatesInspection",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n\nInspection ID: SqlAggregatesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAggregates",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported. Inspection ID: SqlConstantExpressionInspection",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported.\n\nInspection ID: SqlConstantExpressionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlConstantExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;' Inspection ID: SqlMissingColumnAliasesInspection",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n\nInspection ID: SqlMissingColumnAliasesInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingColumnAliases",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix. Inspection ID: SqlAddNotNullColumnInspection",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix.\n\nInspection ID: SqlAddNotNullColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAddNotNullColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com. Inspection ID: OraOverloadInspection",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm).\n\nInspection ID: OraOverloadInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlOverload",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;' Inspection ID: OraMissingBodyInspection",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n\nInspection ID: OraMissingBodyInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;' Inspection ID: OraUnmatchedForwardDeclarationInspection",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n\nInspection ID: OraUnmatchedForwardDeclarationInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlUnmatchedForwardDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Inspection ID: MongoJSExtResolveInspection",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nInspection ID: MongoJSExtResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;' Inspection ID: SqlGotoInspection",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n\nInspection ID: SqlGotoInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlGoto",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;' Inspection ID: SqlWithoutWhereInspection",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n\nInspection ID: SqlWithoutWhereInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlWithoutWhere",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Security"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;' Inspection ID: SqlAmbiguousColumnInspection",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n\nInspection ID: SqlAmbiguousColumnInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAmbiguousColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out. Inspection ID: SqlUnusedCteInspection",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out.\n\nInspection ID: SqlUnusedCteInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnusedCte",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported. Inspection ID: MongoJSResolveInspection",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported.\n\nInspection ID: MongoJSResolveInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "252.25440",
            "rules": [
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported. Inspection ID: HtmlUnknownBooleanAttribute",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.\n\nInspection ID: HtmlUnknownBooleanAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownBooleanAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicatedCode",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file. Inspection ID: InconsistentLineSeparators",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file.\n\nInspection ID: InconsistentLineSeparators"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLineSeparators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n  private boolean CONST = true;\n  void f() {\n    CONST = false;\n  }\n}' Inspection ID: RedundantSuppression",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n\nInspection ID: RedundantSuppression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSuppression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs. Inspection ID: ProblematicWhitespace",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.\n\n\nInspection ID: ProblematicWhitespace"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link. Inspection ID: HtmlUnknownTarget",
                  "markdown": "Reports an unresolved file in a link.\n\nInspection ID: HtmlUnknownTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix. Inspection ID: SSBasedInspection",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix.\n\nInspection ID: SSBasedInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SSBasedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General. Inspection ID: LongLine",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at).\n\nInspection ID: LongLine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag. Inspection ID: XmlWrongRootElement",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag.\n\nInspection ID: XmlWrongRootElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlWrongRootElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>' Inspection ID: CheckValidXmlInScriptTagBody",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n\nInspection ID: CheckValidXmlInScriptTagBody"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckValidXmlInScriptTagBody",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1 Inspection ID: RegExpSuspiciousBackref",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1\n\nInspection ID: RegExpSuspiciousBackref"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSuspiciousBackref",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1 Inspection ID: RegExpSingleCharAlternation",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1\n\nInspection ID: RegExpSingleCharAlternation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSingleCharAlternation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported. Inspection ID: HtmlUnknownAttribute",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.\n\nInspection ID: HtmlUnknownAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>' Inspection ID: CheckTagEmptyBody",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n\nInspection ID: CheckTagEmptyBody"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckTagEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3 Inspection ID: RegExpRedundantEscape",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3\n\nInspection ID: RegExpRedundantEscape"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element. Inspection ID: UnresolvedReference",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element.\n\nInspection ID: UnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>' Inspection ID: HtmlMissingClosingTag",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n\nInspection ID: HtmlMissingClosingTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlMissingClosingTag",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection Inspection ID: CustomRegExpInspection",
                  "markdown": "Custom Regex Inspection\n\nInspection ID: CustomRegExpInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomRegExpInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled. Inspection ID: IncorrectFormatting",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled.\n\nInspection ID: IncorrectFormatting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IncorrectFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>' Inspection ID: HtmlExtraClosingTag",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n\nInspection ID: HtmlExtraClosingTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlExtraClosingTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign. Inspection ID: HtmlUnknownAnchorTarget",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign.\n\nInspection ID: HtmlUnknownAnchorTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAnchorTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1 Inspection ID: RegExpUnexpectedAnchor",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1\n\nInspection ID: RegExpUnexpectedAnchor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnexpectedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click. Inspection ID: SpellCheckingInspection",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.\n\nInspection ID: SpellCheckingInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpellCheckingInspection",
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator. Inspection ID: CheckXmlFileWithXercesValidator",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.\n\nInspection ID: CheckXmlFileWithXercesValidator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckXmlFileWithXercesValidator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported. Inspection ID: HtmlUnknownTag",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.\n\nInspection ID: HtmlUnknownTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1 Inspection ID: RegExpEscapedMetaCharacter",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1\n\nInspection ID: RegExpEscapedMetaCharacter"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpEscapedMetaCharacter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection. Inspection ID: XmlHighlighting",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection.\n\nInspection ID: XmlHighlighting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate values of the 'id' attribute in XML and HTML. Inspection ID: XmlDuplicatedId",
                  "markdown": "Reports a duplicate values of the `id` attribute in XML and HTML.\n\nInspection ID: XmlDuplicatedId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlDuplicatedId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]' Inspection ID: RegExpDuplicateCharacterInClass",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n\nInspection ID: RegExpDuplicateCharacterInClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateCharacterInClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports the use of the 'id' that is not defined anywhere in XML and HTML. Inspection ID: XmlInvalidId",
                  "markdown": "Reports the use of the `id` that is not defined anywhere in XML and HTML.\n\nInspection ID: XmlInvalidId"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlInvalidId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML. Inspection ID: XmlUnboundNsPrefix",
                  "markdown": "Reports an unbound namespace prefix in XML.\n\nInspection ID: XmlUnboundNsPrefix"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnboundNsPrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported. Inspection ID: RequiredAttributes",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.\n\nInspection ID: RequiredAttributes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RequiredAttributes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text. Inspection ID: ReassignedToPlainText",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**.\n\nInspection ID: ReassignedToPlainText"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReassignedToPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML. Inspection ID: XmlUnusedNamespaceDeclaration",
                  "markdown": "Reports an unused namespace declaration or location hint in XML.\n\nInspection ID: XmlUnusedNamespaceDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnusedNamespaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2 Inspection ID: RegExpRedundantClassElement",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2\n\nInspection ID: RegExpRedundantClassElement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantClassElement",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1 Inspection ID: RegExpSimplifiable",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1\n\nInspection ID: RegExpSimplifiable"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpSimplifiable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2 Inspection ID: RegExpEmptyAlternationBranch",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2\n\nInspection ID: RegExpEmptyAlternationBranch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpEmptyAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection: Option \"Report syntax errors\": report parser-related issues. Option \"Report issues from language-specific annotators\": report issues found by annotators configured for the relevant language. See Custom Language Support: Annotators for details. Option \"Report other highlighting problems\": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See Custom Language Support: Highlighting for details. Inspection ID: Annotator",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details.\n\nInspection ID: Annotator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Annotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML. Inspection ID: XmlPathReference",
                  "markdown": "Reports an unresolved file reference in XML.\n\nInspection ID: XmlPathReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlPathReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1 Inspection ID: RegExpUnnecessaryNonCapturingGroup",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1\n\nInspection ID: RegExpUnnecessaryNonCapturingGroup"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnnecessaryNonCapturingGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments. Inspection ID: TodoComment",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments.\n\nInspection ID: TodoComment"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TodoComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2 Inspection ID: RegExpRedundantNestedCharacterClass",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2\n\nInspection ID: RegExpRedundantNestedCharacterClass"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantNestedCharacterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'. Inspection ID: XmlDeprecatedElement",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'.\n\nInspection ID: XmlDeprecatedElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDeprecatedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value. Inspection ID: HtmlWrongAttributeValue",
                  "markdown": "Reports an incorrect HTML attribute value.\n\nInspection ID: HtmlWrongAttributeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlWrongAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute. Inspection ID: XmlDefaultAttributeValue",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute.\n\nInspection ID: XmlDefaultAttributeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDefaultAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1 Inspection ID: RegExpOctalEscape",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1\n\nInspection ID: RegExpOctalEscape"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpOctalEscape",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored. Inspection ID: UnusedDefine",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored.\n\nInspection ID: UnusedDefine"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedDefine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported. Inspection ID: EmptyDirectory",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported.\n\n\nInspection ID: EmptyDirectory"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyDirectory",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2 Inspection ID: RegExpAnonymousGroup",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2\n\nInspection ID: RegExpAnonymousGroup"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpAnonymousGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files. Inspection ID: CheckDtdRefs",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.\n\nInspection ID: CheckDtdRefs"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckDtdRefs",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows. Inspection ID: NonAsciiCharacters",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows.\n\nInspection ID: NonAsciiCharacters"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAsciiCharacters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved references in XML. Inspection ID: XmlUnresolvedReference",
                  "markdown": "Reports an unresolved references in XML.\n\nInspection ID: XmlUnresolvedReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings. Inspection ID: LossyEncoding",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**.\n\nInspection ID: LossyEncoding"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LossyEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1 Inspection ID: RegExpRepeatedSpace",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1\n\nInspection ID: RegExpRepeatedSpace"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRepeatedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1 Inspection ID: RegExpDuplicateAlternationBranch",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1\n\nInspection ID: RegExpDuplicateAlternationBranch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example: '# Output directories\n    /out/\n    /target/\n    /out/' Inspection ID: IgnoreFileDuplicateEntry",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n\nInspection ID: IgnoreFileDuplicateEntry"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoreFileDuplicateEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>' Inspection ID: CheckEmptyScriptTag",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n\nInspection ID: CheckEmptyScriptTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckEmptyScriptTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "gherkin",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "GherkinScenarioToScenarioOutline",
                "shortDescription": {
                  "text": "Scenario with Examples section"
                },
                "fullDescription": {
                  "text": "Reports Gherkin scenarios that contain an 'Examples' section. Use the quick-fix to convert 'Scenario' to 'Scenario Outline'. Inspection ID: GherkinScenarioToScenarioOutline",
                  "markdown": "Reports Gherkin scenarios that contain an `Examples` section.\n\nUse the quick-fix to convert `Scenario` to `Scenario Outline`.\n\nInspection ID: GherkinScenarioToScenarioOutline"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GherkinScenarioToScenarioOutline",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GherkinMisplacedBackground",
                "shortDescription": {
                  "text": "Misplaced background section"
                },
                "fullDescription": {
                  "text": "Reports 'Background' sections that are located incorrectly. The 'Background' section must be located before the 'Scenario' section. Inspection ID: GherkinMisplacedBackground",
                  "markdown": "Reports `Background` sections that are located incorrectly. The `Background` section must be located before the `Scenario` section.\n\nInspection ID: GherkinMisplacedBackground"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GherkinMisplacedBackground",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CucumberMissedExamples",
                "shortDescription": {
                  "text": "Missing examples section"
                },
                "fullDescription": {
                  "text": "Reports scenario outlines in Cucumber .feature files that do not have the 'Examples' section. Use the quick-fix to automatically create the 'Examples' section with a pre-filled table header. Inspection ID: CucumberMissedExamples",
                  "markdown": "Reports scenario outlines in Cucumber .feature files that do not have the `Examples` section.\n\nUse the quick-fix to automatically create the `Examples` section with a pre-filled table header.\n\nInspection ID: CucumberMissedExamples"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CucumberMissedExamples",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CucumberTableInspection",
                "shortDescription": {
                  "text": "Unused or missing columns in Cucumber tables"
                },
                "fullDescription": {
                  "text": "Reports tables in 'Examples' sections in Cucumber .feature files with unused or missing columns. Inspection ID: CucumberTableInspection",
                  "markdown": "Reports tables in `Examples` sections in Cucumber .feature files with unused or missing columns.\n\nInspection ID: CucumberTableInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CucumberTableInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CucumberUndefinedStep",
                "shortDescription": {
                  "text": "Undefined step"
                },
                "fullDescription": {
                  "text": "Reports steps in Cucumber (or some other Gherkin) .feature files that do not have matching step definitions. Use the quick-fix to automatically create a new step definition. Inspection ID: CucumberUndefinedStep",
                  "markdown": "Reports steps in Cucumber (or some other Gherkin) .feature files that do not have matching step definitions.\n\nUse the quick-fix to automatically create a new step definition.\n\nInspection ID: CucumberUndefinedStep"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CucumberUndefinedStep",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GherkinBrokenTableInspection",
                "shortDescription": {
                  "text": "Gherkin table is broken"
                },
                "fullDescription": {
                  "text": "Reports a table if there is at least one row with the number of cells different from the number of cells in the table header. Inspection ID: GherkinBrokenTableInspection",
                  "markdown": "Reports a table if there is at least one row with the number of cells different from the number of cells in the table header.\n\nInspection ID: GherkinBrokenTableInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GherkinBrokenTableInspection",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CucumberExamplesColon",
                "shortDescription": {
                  "text": "Missing ':' after examples keyword"
                },
                "fullDescription": {
                  "text": "Reports 'Examples' sections in Cucumber .feature files if they do not have ':' after the 'Examples' keyword. Inspection ID: CucumberExamplesColon",
                  "markdown": "Reports `Examples` sections in Cucumber .feature files if they do not have ':' after the `Examples` keyword.\n\nInspection ID: CucumberExamplesColon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CucumberExamplesColon",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Cucumber",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37. Inspection ID: HtmlRequiredAltAttribute",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html).\n\nInspection ID: HtmlRequiredAltAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredAltAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44. Inspection ID: HtmlFormInputWithoutLabel",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  \n\nInspection ID: HtmlFormInputWithoutLabel"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlFormInputWithoutLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64. Inspection ID: HtmlRequiredTitleAttribute",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html).\n\nInspection ID: HtmlRequiredTitleAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag. Inspection ID: HtmlDeprecatedTag",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.\n\nInspection ID: HtmlDeprecatedTag"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image. Inspection ID: CheckImageSize",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image.\n\nInspection ID: CheckImageSize"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckImageSize",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Performance"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73. Inspection ID: HtmlRequiredSummaryAttribute",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html).\n\nInspection ID: HtmlRequiredSummaryAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredSummaryAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57. Inspection ID: HtmlRequiredLangAttribute",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html).\n\nInspection ID: HtmlRequiredLangAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredLangAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background. Inspection ID: HtmlNonExistentInternetResource",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background.\n\nInspection ID: HtmlNonExistentInternetResource"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlNonExistentInternetResource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25. Inspection ID: HtmlRequiredTitleElement",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html).\n\nInspection ID: HtmlRequiredTitleElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute. Inspection ID: HtmlDeprecatedAttribute",
                  "markdown": "Reports an obsolete HTML5 attribute.\n\nInspection ID: HtmlDeprecatedAttribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag. Inspection ID: HtmlPresentationalElement",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.\n\nInspection ID: HtmlPresentationalElement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlPresentationalElement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element. Inspection ID: CssInvalidHtmlTagReference",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element.\n\nInspection ID: CssInvalidHtmlTagReference"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidHtmlTagReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleDeclaration",
                "shortDescription": {
                  "text": "Invalid @property declaration"
                },
                "fullDescription": {
                  "text": "Reports a missing required syntax, inherits, or initial-value property in a declaration of a custom property. Inspection ID: CssInvalidCustomPropertyAtRuleDeclaration",
                  "markdown": "Reports a missing required [syntax](https://developer.mozilla.org/en-US/docs/web/css/@property/syntax), [inherits](https://developer.mozilla.org/en-US/docs/web/css/@property/inherits), or [initial-value](https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value) property in a declaration of a custom property.\n\nInspection ID: CssInvalidCustomPropertyAtRuleDeclaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter. Inspection ID: CssInvalidFunction",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter.\n\nInspection ID: CssInvalidFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidFunction",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration. Inspection ID: CssMissingSemicolon",
                  "markdown": "Reports a missing semicolon at the end of a declaration.\n\nInspection ID: CssMissingSemicolon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px' Inspection ID: CssRedundantUnit",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n\nInspection ID: CssRedundantUnit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssRedundantUnit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}' Inspection ID: CssMissingComma",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n\nInspection ID: CssMissingComma"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingComma",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value. Inspection ID: CssInvalidPropertyValue",
                  "markdown": "Reports an incorrect CSS property value.\n\nInspection ID: CssInvalidPropertyValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPropertyValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data. Inspection ID: CssBrowserCompatibilityForProperties",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data).\n\nInspection ID: CssBrowserCompatibilityForProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssBrowserCompatibilityForProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleName",
                "shortDescription": {
                  "text": "Invalid @property name"
                },
                "fullDescription": {
                  "text": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes. Example: '@property invalid-property-name {\n  ...\n}\n\n@property --valid-property-name {\n  ...\n}' Inspection ID: CssInvalidCustomPropertyAtRuleName",
                  "markdown": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes.\n\n**Example:**\n\n\n    @property invalid-property-name {\n      ...\n    }\n\n    @property --valid-property-name {\n      ...\n    }\n\nInspection ID: CssInvalidCustomPropertyAtRuleName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'. Inspection ID: CssConvertColorToHexInspection",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n\nInspection ID: CssConvertColorToHexInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToHexInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead. Inspection ID: CssReplaceWithShorthandUnsafely",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.\n\nInspection ID: CssReplaceWithShorthandUnsafely"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandUnsafely",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownUnit",
                "shortDescription": {
                  "text": "Unknown unit"
                },
                "fullDescription": {
                  "text": "Reports an unknown unit. Inspection ID: CssUnknownUnit",
                  "markdown": "Reports an unknown unit.\n\nInspection ID: CssUnknownUnit"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownUnit",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value. Inspection ID: CssInvalidMediaFeature",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value.\n\nInspection ID: CssInvalidMediaFeature"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidMediaFeature",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'. Inspection ID: CssConvertColorToRgbInspection",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n\nInspection ID: CssConvertColorToRgbInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToRgbInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly. Inspection ID: CssUnusedSymbol",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly.\n\nInspection ID: CssUnusedSymbol"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnusedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssDeprecatedValue",
                "shortDescription": {
                  "text": "Deprecated value"
                },
                "fullDescription": {
                  "text": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent. Inspection ID: CssDeprecatedValue",
                  "markdown": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.\n\nInspection ID: CssDeprecatedValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssDeprecatedValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px' Inspection ID: CssNonIntegerLengthInPixels",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n\nInspection ID: CssNonIntegerLengthInPixels"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssNonIntegerLengthInPixels",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, an '@import' rule must be defined at the top of the stylesheet, before any other at-rule (except '@charset' and '@layer') and style declarations, or it will be ignored. Inspection ID: CssInvalidImport",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\nan `@import` rule must be defined at the top of the stylesheet, before any other at-rule\n(except `@charset` and `@layer`) and style declarations, or it will be ignored.\n\nInspection ID: CssInvalidImport"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule. Inspection ID: CssInvalidAtRule",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule).\n\nInspection ID: CssInvalidAtRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidAtRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function. Inspection ID: CssUnresolvedCustomProperty",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function.\n\nInspection ID: CssUnresolvedCustomProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedCustomProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}' Inspection ID: CssOverwrittenProperties",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n\nInspection ID: CssOverwrittenProperties"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssOverwrittenProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement. Inspection ID: CssUnknownTarget",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement.\n\nInspection ID: CssUnknownTarget"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownTarget",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height. Inspection ID: CssNegativeValue",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.\n\nInspection ID: CssNegativeValue"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssNegativeValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'. Inspection ID: CssNoGenericFontName",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`.\n\nInspection ID: CssNoGenericFontName"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssNoGenericFontName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }' Inspection ID: CssUnresolvedClassInComposesRule",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n\nInspection ID: CssUnresolvedClassInComposesRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedClassInComposesRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value. Inspection ID: CssInvalidCharsetRule",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value.\n\nInspection ID: CssInvalidCharsetRule"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidCharsetRule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection. Inspection ID: CssReplaceWithShorthandSafely",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection.\n\nInspection ID: CssReplaceWithShorthandSafely"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandSafely",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation. Inspection ID: CssUnknownProperty",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation.\n\nInspection ID: CssUnknownProperty"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnknownProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element. Inspection ID: CssInvalidPseudoSelector",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements).\n\nInspection ID: CssInvalidPseudoSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPseudoSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidNestedSelector",
                "shortDescription": {
                  "text": "Invalid nested selector"
                },
                "fullDescription": {
                  "text": "Reports a nested selector starting with an identifier or a functional notation. Inspection ID: CssInvalidNestedSelector",
                  "markdown": "Reports a nested selector starting with an identifier or a functional notation.\n\nInspection ID: CssInvalidNestedSelector"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidNestedSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.dmarcotte.handlebars",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "HbEmptyBlock",
                "shortDescription": {
                  "text": "Missing block helper argument"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'each', or 'with' block helper without an argument. Inspection ID: HbEmptyBlock",
                  "markdown": "Reports an `if`, `each`, or `with` block helper without an argument.\n\nInspection ID: HbEmptyBlock"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HbEmptyBlock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Handlebars_Mustache",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.dependencyAnalysis",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "CheckThirdPartySoftwareList",
                "shortDescription": {
                  "text": "Check third party software list"
                },
                "fullDescription": {
                  "text": "Check project for possible problems: user's third party software list does not match the collected project metadata",
                  "markdown": "Check project for possible problems: user's third party software list does not match the collected project metadata"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckThirdPartySoftwareList",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDependencyLicenses",
                "shortDescription": {
                  "text": "Check dependency licenses"
                },
                "fullDescription": {
                  "text": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues",
                  "markdown": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckDependencyLicenses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckModuleLicenses",
                "shortDescription": {
                  "text": "Check module licenses"
                },
                "fullDescription": {
                  "text": "Check module licenses for possible problems: missing licenses or other compliance issues",
                  "markdown": "Check module licenses for possible problems: missing licenses or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckModuleLicenses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world' Inspection ID: YAMLSchemaValidation",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n\nInspection ID: YAMLSchemaValidation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLIncompatibleTypes",
                "shortDescription": {
                  "text": "Suspicious type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions. Example: 'myElements:\n  - value1\n  - value2\n  - false # <- reported, because it is a boolean value, while other values are strings' Inspection ID: YAMLIncompatibleTypes",
                  "markdown": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n\nInspection ID: YAMLIncompatibleTypes"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLIncompatibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias' Inspection ID: YAMLUnresolvedAlias",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n\nInspection ID: YAMLUnresolvedAlias"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLUnresolvedAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value' Inspection ID: YAMLSchemaDeprecation",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n\nInspection ID: YAMLSchemaDeprecation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor' Inspection ID: YAMLRecursiveAlias",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n\nInspection ID: YAMLRecursiveAlias"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLRecursiveAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value' Inspection ID: YAMLDuplicatedKeys",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n\nInspection ID: YAMLDuplicatedKeys"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLDuplicatedKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1' Inspection ID: YAMLUnusedAnchor",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n\nInspection ID: YAMLUnusedAnchor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLUnusedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.less",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "LessUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less mixin that is not resolved. Example: '* {\n  .unknown-mixin();\n}' Inspection ID: LessUnresolvedMixin",
                  "markdown": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n\nInspection ID: LessUnresolvedMixin"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less variable that is not resolved. Example: '* {\n  margin: @unknown-var;\n}' Inspection ID: LessUnresolvedVariable",
                  "markdown": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n\nInspection ID: LessUnresolvedVariable"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly imported in the current file. Example: '* {\n  margin: @var-in-other-file;\n}' Inspection ID: LessResolvedByNameOnly",
                  "markdown": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n\nInspection ID: LessResolvedByNameOnly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LessResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example: '@Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist' Inspection ID: InjectedReferences",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n\nInspection ID: InjectedReferences"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectedReferences",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.vue",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "VueDataFunction",
                "shortDescription": {
                  "text": "Data function"
                },
                "fullDescription": {
                  "text": "Reports a Vue component data property that is not a function. Suggests wrapping an object literal with a function. When defining a component, 'data' must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for 'data', that very object will be shared by reference across all instances created! With a 'data' function, every time a new instance is created we can simply call it to return a fresh copy of the initial data. Inspection ID: VueDataFunction",
                  "markdown": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data.\n\nInspection ID: VueDataFunction"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDataFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedSlot",
                "shortDescription": {
                  "text": "Unrecognized slot"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue slot. Inspection ID: VueUnrecognizedSlot",
                  "markdown": "Reports an unrecognized Vue slot.\n\nInspection ID: VueUnrecognizedSlot"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "VueUnrecognizedSlot",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueMissingComponentImportInspection",
                "shortDescription": {
                  "text": "Missing component import"
                },
                "fullDescription": {
                  "text": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import. Inspection ID: VueMissingComponentImportInspection",
                  "markdown": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.\n\nInspection ID: VueMissingComponentImportInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueMissingComponentImportInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedDirective",
                "shortDescription": {
                  "text": "Unrecognized directive"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue directive. Inspection ID: VueUnrecognizedDirective",
                  "markdown": "Reports an unrecognized Vue directive.\n\nInspection ID: VueUnrecognizedDirective"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueUnrecognizedDirective",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDuplicateTag",
                "shortDescription": {
                  "text": "Duplicate template/script tag"
                },
                "fullDescription": {
                  "text": "Reports multiple usages of the 'template' or 'script' tag in a Vue file. Vue Component specification indicates that each '*.vue' file can contain at most one 'template' or 'script' block at a time. Inspection ID: VueDuplicateTag",
                  "markdown": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time.\n\nInspection ID: VueDuplicateTag"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDuplicateTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDeprecatedSymbol",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated Vue symbol. Inspection ID: VueDeprecatedSymbol",
                  "markdown": "Reports a deprecated Vue symbol.\n\nInspection ID: VueDeprecatedSymbol"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDeprecatedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "JsCoverageInspection",
                "shortDescription": {
                  "text": "Check JavaScript and TypeScript source code coverage"
                },
                "fullDescription": {
                  "text": "Reports methods, classes and files whose coverage is below a certain threshold. Inspection ID: JsCoverageInspection",
                  "markdown": "Reports methods, classes and files whose coverage is below a certain threshold.\n\nInspection ID: JsCoverageInspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsCoverageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Coverage",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityInspection",
                "shortDescription": {
                  "text": "Code metrics"
                },
                "fullDescription": {
                  "text": "Calculates cyclomatic complexity. Inspection ID: CyclomaticComplexityInspection",
                  "markdown": "Calculates cyclomatic complexity.\n\nInspection ID: CyclomaticComplexityInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CyclomaticComplexityInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Qodana",
                      "index": 56,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.security.package-checker",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "VulnerableLibrariesLocal",
                "shortDescription": {
                  "text": "Vulnerable declared dependency"
                },
                "fullDescription": {
                  "text": "Reports vulnerabilities in Gradle, Maven, NPM, PyPI and Go dependencies declared in your project. A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability. Inspection ID: VulnerableLibrariesLocal",
                  "markdown": "Reports vulnerabilities in Gradle, Maven, NPM, PyPI and Go dependencies declared in your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.\n\nInspection ID: VulnerableLibrariesLocal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableLibrariesLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MaliciousLibrariesLocal",
                "shortDescription": {
                  "text": "Malicious dependency"
                },
                "fullDescription": {
                  "text": "Reports malicious NPM and PyPI dependencies declared in your project. Fixing the reported problems helps prevent your software from being compromised by an attacker. Remove a malicious package to solve a problem. Inspection ID: MaliciousLibrariesLocal",
                  "markdown": "Reports malicious NPM and PyPI dependencies declared in your project.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nRemove a malicious package to solve a problem.\n\nInspection ID: MaliciousLibrariesLocal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MaliciousLibrariesLocal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmVulnerableApiCode",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Inspection ID: NpmVulnerableApiCode",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nInspection ID: NpmVulnerableApiCode"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NpmVulnerableApiCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Security",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.lang.ejs",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "EjsUnresolvedInclude",
                "shortDescription": {
                  "text": "Unresolved include"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in an EJS include. Inspection ID: EjsUnresolvedInclude",
                  "markdown": "Reports an unresolved file reference in an EJS include.\n\nInspection ID: EjsUnresolvedInclude"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EjsUnresolvedInclude",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EJS",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "intellij.webpack",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "WebpackConfigHighlighting",
                "shortDescription": {
                  "text": "Webpack config compliance with JSON Schema"
                },
                "fullDescription": {
                  "text": "Validates options in webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`) against webpack options schema. Disable this inspection to turn off validation and code completion inside the configuration object. Inspection ID: WebpackConfigHighlighting",
                  "markdown": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object.\n\nInspection ID: WebpackConfigHighlighting"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WebpackConfigHighlighting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Sanity"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tslint",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "TsLint",
                "shortDescription": {
                  "text": "TSLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the TSLint linter. The highlighting is based on the rule severity specified in the TSLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules. Inspection ID: TsLint",
                  "markdown": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.\n\nInspection ID: TsLint"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TsLint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jsonpath",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate. Inspection ID: JsonPathEvaluateUnknownKey",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.\n\nInspection ID: JsonPathEvaluateUnknownKey"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathEvaluateUnknownKey",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Reliability"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'. Inspection ID: JsonPathUnknownFunction",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`.\n\nInspection ID: JsonPathUnknownFunction"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'. Inspection ID: JsonPathUnknownOperator",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`.\n\nInspection ID: JsonPathUnknownOperator"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownOperator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.jade",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "JadeTabsAndSpaces",
                "shortDescription": {
                  "text": "Tabs and spaces both used"
                },
                "fullDescription": {
                  "text": "Reports use of spaces and tabs for indentation in a Pug file. Inspection ID: JadeTabsAndSpaces",
                  "markdown": "Reports use of spaces and tabs for indentation in a Pug file.\n\nInspection ID: JadeTabsAndSpaces"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JadeTabsAndSpaces",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pug_Jade",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.hardcodedPasswords",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "HardcodedPasswords",
                "shortDescription": {
                  "text": "Hardcoded passwords"
                },
                "fullDescription": {
                  "text": "Detects potential security tokens or passwords in comments using entropy analysis and regular expressions. This inspection utilizes entropy analysis and regular expressions to scan the codebase for strings that resemble security tokens or passwords. It highlights these findings, helping developers identify and secure potential vulnerabilities. The inspection's effectiveness relies on the patterns defined in its configuration, making it adaptable to different coding environments and requirements. '// Example of a regular expression pattern used for detection:\n/[0-9]+:AA[0-9A-Za-z\\-_]{33}/' Text after this comment will only be shown in the settings of the inspection. Inspection ID: HardcodedPasswords",
                  "markdown": "Detects potential security tokens or passwords in comments using entropy analysis and regular expressions.\n\n\nThis inspection utilizes entropy analysis and regular expressions to scan the codebase for strings that resemble security tokens or\npasswords. It highlights these findings, helping developers identify and secure potential vulnerabilities. The inspection's effectiveness\nrelies on the patterns defined in its configuration, making it adaptable to different coding environments and requirements.\n\n\n    // Example of a regular expression pattern used for detection:\n    /[0-9]+:AA[0-9A-Za-z\\-_]{33}/\n\nText after this comment will only be shown in the settings of the inspection.\n\nInspection ID: HardcodedPasswords"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HardcodedPasswords",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical",
                    "codeQualityCategory": "Unspecified"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "252.25440.0",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks. Inspection ID: LanguageDetectionInspection",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.\n\nInspection ID: LanguageDetectionInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LanguageDetectionInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar and Style. Inspection ID: GrazieInspection",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar and Style](settings://reference.settingsdialog.project.grazie).\n\nInspection ID: GrazieInspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieInspection",
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info",
                    "codeQualityCategory": "Code Style"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDJS"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "startTimeUtc": "2025-08-24T17:56:13.785538832Z",
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/tmerrien/notto.git",
          "revisionId": "1e29615387652113c0065d5cf3183f9bc82acf33",
          "branch": "master",
          "properties": {
            "repoUrl": "https://github.com/tmerrien/notto.git",
            "lastAuthorName": "tmerrien",
            "vcsType": "Git",
            "lastAuthorEmail": "tmerrien@upei.ca"
          }
        }
      ],
      "results": [
        {
          "ruleId": "ES6PreferShortImport",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Import can be shortened",
            "markdown": "Import can be shortened"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "__tests__/components.test.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 24,
                  "charOffset": 80,
                  "charLength": 25,
                  "snippet": {
                    "text": "'../components/ui/button'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 146,
                  "snippet": {
                    "text": "import { render, screen } from '@testing-library/react'\r\nimport { Button } from '../components/ui/button'\r\n\r\n// Mock the class-variance-authority\r"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "82ea117b446e345f",
            "equalIndicator/v1": "60673d29f98b2343d587db06bb91bd9de813706a246580946c173f3727561dd1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/index.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 103,
                  "snippet": {
                    "text": "import { stripIndent } from 'common-tags'\n\nimport { columnsSql, extensionsSql, tablesSql } from './sql'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "07bf772d25b5c286",
            "equalIndicator/v1": "007c87eac3fcede811de1be1c892eda66effe3c5b9309efca3d997d0b4dc4fc4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/table.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d84d56e05da1e301",
            "equalIndicator/v1": "00bacc8bf72465fa570277802cc777bcecc047fa68a0f79c15e9ccffa8c6c6d8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sign-up-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b01e3709a031a4de",
            "equalIndicator/v1": "01a19e16404f1f29395e8ce7011182a60363405e6f059efee3e31a9a4c16cc47"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/dynamic-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 67,
                  "snippet": {
                    "text": "'use client'\n\nimport { zodResolver } from '@hookform/resolvers/zod'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e2b5e7c70ba31758",
            "equalIndicator/v1": "01c64f71e04b16800f14c5f95cba374a222bdafe5b1339671cd8ec3dddc027b7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/avatar-stack.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7e58e762e9800d3",
            "equalIndicator/v1": "02dd1e29ad7ae539ee4851871207ec51348982d861399f0a4e033b9ade9bab13"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/logs.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c7356e58540a8dc6",
            "equalIndicator/v1": "02dd9fac02d60dd4c14fddbc8bfcf4df74d37c3d20ebf0cd1da4b27d88a07123"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-chat.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 57,
                  "snippet": {
                    "text": "'use client'\n\nimport { createClient } from '@/lib/client'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4dac697e84db6fb6",
            "equalIndicator/v1": "04801a1de75956cf88cdca79ed87487b1e8e60f53cd608cf6e480fde339a7e13"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/input-otp.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f91f9d17ad897f7c",
            "equalIndicator/v1": "048131820cb7ca91ff3bb33da78c0218a0d0b6e8d1b934c313feecef2d31e1ca"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-info.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 62,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterInfoProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "33974c86852841fd",
            "equalIndicator/v1": "04e905dd62156c58d7f6f8a11e0c3ca652fbee225d05742f14f912282a9e0d44"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/management-api.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5c7e32c227791f51",
            "equalIndicator/v1": "05575f7656eaf00fd5b13607c978cf1c0687d0146fa1fa575db42babd7cf2967"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/server.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 90,
                  "snippet": {
                    "text": "import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e70f881ff9fedd9",
            "equalIndicator/v1": "05780c70235220353591975a9689696b622fac16246560b4776324294a4e3887"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-mobile.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7f2a76d66c757f8",
            "equalIndicator/v1": "059352ed2663fedeafc7b65de9c7f6ec2c9e9c5eb8e43e7e9f082773c6214f03"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/badge.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "651c5b3e5c82dedf",
            "equalIndicator/v1": "05dcb595442da5be2bbdcf156b41c6786314f924db8f1896d869725ea5285d8e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-tables.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "50097830f0718a2f",
            "equalIndicator/v1": "0613aaea2e46c13df24dba8f9e8e667f446aa8017a8317a83722c5955a562964"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-cursors.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 164,
                  "snippet": {
                    "text": "import { createClient } from '@/lib/client'\nimport { RealtimeChannel } from '@supabase/supabase-js'\nimport { useCallback, useEffect, useRef, useState } from 'react'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c261960d45a5d772",
            "equalIndicator/v1": "07b99d4991e616f4b7847d414b03f5b401647bea6556ac7490fc412cd876af8c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/sidebar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ec0bcd1ee3355da",
            "equalIndicator/v1": "07fe6672ed3b3ed63b4d28c915cbec28d2426da9e3e08dc5d125bfc73f027f5a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/alert-dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "95198d5da6f764d2",
            "equalIndicator/v1": "0929a182293b9a1bd18a57e32a28bcf0b221db93724096246ac8d5ba3c2e0621"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/core/logo.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8c070e8b26d84c02",
            "equalIndicator/v1": "0a3b4fb191265126329ad9bde60a3c0f536e3bee35554f04040d1d160f07e51b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/utils.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4df68c07ce9f5d11",
            "equalIndicator/v1": "0ae0b26e566b5dff9a5bc85a57c216e429fc52031c3c94acc26b18e7304980d6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/accordion.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5ca2cb2d0fc80a00",
            "equalIndicator/v1": "0b011f07f4687bb5901699be86f53c69d2c7f29711940d70874ec71f553e6c67"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/card.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 103,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/card'\nimport { brandConfig } from '@/app/components/branding'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3bf828f2182025f2",
            "equalIndicator/v1": "0ba639395049facea1e85c112f05bd7d7c55387b091ba756fff161862b006448"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/tooltip.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7924b24cb11c0d81",
            "equalIndicator/v1": "0c74f381fe937ce059cd1a220bbac61c5bbae9e812c96d5f74c40a3a75bdb19e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/auth/login/page.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "14e3d447551f6b6c",
            "equalIndicator/v1": "0c8a7ab213f0d425e8f658844acb81372a71b1f237a67e9f3cb1c02c90418733"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/button.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 115,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/button'\nimport { buildComponentClasses } from '@/app/components/branding'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "88ee7c3b4681c1c7",
            "equalIndicator/v1": "0cd10a91538bf9b8e874ef2cfb61578151f7440b39861033feb37663ef46619a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/chat-message.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 94,
                  "snippet": {
                    "text": "import { cn } from '@/lib/utils'\nimport type { ChatMessage } from '@/hooks/use-realtime-chat'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0d330e1a74bbfaf1",
            "equalIndicator/v1": "0d0798787d10050b2fa075ac57021c7e6df17e22b8e4c5b9f75452a1fc33fed9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/tooltip.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0780b72b6a9e47d7",
            "equalIndicator/v1": "0d87b3b03120cdc5feb29db77066dfecebf508a31454ad759567500171a504c0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/context-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "689a5360d1afd140",
            "equalIndicator/v1": "0dff59abd180f02248fc0de0a438273d8f561486ba6c04e5cb7e7950db6e8ec7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4273e6057bf466ec",
            "equalIndicator/v1": "0e9625055de2523be4d17111f9c0dd99708f3170e7db1de8db267f165d6f9b27"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/separator.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7921e866f83507cb",
            "equalIndicator/v1": "0fba907732d50ce2c8c1fda8c74f6f14ee42c6c7030ac3bda8db2b623751d32b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-logs.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "782bcd7ee2d7b170",
            "equalIndicator/v1": "0fd2ac3f48d2f775eaa0c9356b71326c92ab44312adf1637e3dd9b815ee1daac"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/label.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0762e3d24202fd27",
            "equalIndicator/v1": "0fd4d698e0598f48ec2dfb5e1148297b79d864d5c8a509a9a2d46692c8e6f41f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "906d1299cf099cfc",
            "equalIndicator/v1": "10ac61d84512069559a53e6d791afd5b70e971afbc9003c2b98ce6ba6729cf81"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/typography.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "// Typography tokens - fonts, sizes, transforms, spacing"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 106,
                  "snippet": {
                    "text": "// Typography tokens - fonts, sizes, transforms, spacing\nexport const typographyTokens = {\n  fontFamily: {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4a021776cb1ccf68",
            "equalIndicator/v1": "11d2866be7fb88085a47ccf2ed729143a1d59a7ec0b82765b89d8f869b3f98b1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "eslint.config.mjs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 115,
                  "snippet": {
                    "text": "import { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { FlatCompat } from \"@eslint/eslintrc\";"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2d4659808f7f1dd4",
            "equalIndicator/v1": "11ec8342866d9af29300d0edefe49125f798a892cd7f1a88be07e88b1e8edb13"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/input-otp.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7c8b33e154dd7e48",
            "equalIndicator/v1": "11f7e5c5dd07fc1921d14dee6c28c729659a565f9e0d25ef00c6bcbd696ee1f8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/suggestions.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ae5f5d141cd1d68d",
            "equalIndicator/v1": "12b6285a84956c6f5ebaea3fa0aa34c6184a9960d582db75400adb2cb96115a7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/auth/login/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f24dc3b3cde1251",
            "equalIndicator/v1": "12d39a2a30247c3cb1c8d462b3b5a08eeedd8db5da3e50e32a917d54a329ebc9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/update-password-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9d0accbea5abd15",
            "equalIndicator/v1": "1338194b9c1729f7d754a03a72c1ec4a59d0d96d5efdc3a0c02eb15e2d419c51"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c0d795910fd43929",
            "equalIndicator/v1": "1370266bbb2d075146dd6bb5911995c981495ea1177752c0d9790875dacbd722"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/schemas/auth.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7d1971091c2ebef7",
            "equalIndicator/v1": "13b00a492ed782b6b643fab8be3f9dc182d09d4ab28310d7ce3fc52e8ef45d20"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/tooltip.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 75,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/tooltip'\n\ninterface TooltipProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2a9ff791d4e6bf99",
            "equalIndicator/v1": "1494c81adbb8bb01f0810d3c8ee779ea2ba01ec0fb1fa6504880b6d175a88c6c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/pg-meta.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4f0fa0ec5965ce6f",
            "equalIndicator/v1": "15ed07dc03555e929ff2db55903b8406b3c08e3586f5a66128d2b4853644fa6c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/schemas/secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "449f1a28544d3f3f",
            "equalIndicator/v1": "17d093eb1be84fcd2caf67e90036ac34b23637196b6ba500be05c188dd7eb898"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-text.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "import { Text } from '@/app/components/ui/text'\nimport { ReactNode } from 'react'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "499c148cfdd0d6f9",
            "equalIndicator/v1": "19155078723b5b795bcd045bc730402df21450b5cd8e7e6daaacc2dde53039a6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/input.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "286d61c69abc694a",
            "equalIndicator/v1": "19a237407ad030e6499254cb5edf49c613230225df81b7c5e61dbbde3a17a62b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/context-menu.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bca675d38bfa6b95",
            "equalIndicator/v1": "19b037e3a8d62239ec1d082ee41a7608888d84b27d94e1de6e107cc6353999ec"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-current-user-image.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d436f46e961f31ed",
            "equalIndicator/v1": "1a4daa835254b9fdbbb88fcf49d00fd5506f023f5d92bfdefe89cbab8f1ff9fc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/input-otp.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b324c619e5bb0c15",
            "equalIndicator/v1": "1b7d3094aee788491a3a53f5c5dca36c69fc5d67c898c5d823469a6030f2350b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/resizable.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b442104f469b829f",
            "equalIndicator/v1": "1bb6434ca2bee69c340b96978e88fc955b16c3dfee5e8639ed35b339b6958f8a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/navigation-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "22fbeeaa6336a0e8",
            "equalIndicator/v1": "1bc6f63d9db538148841f1a9a9c20912baf8e34fceeb31242c637c77c285e82c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3aa7c0cde91478bf",
            "equalIndicator/v1": "1cf009e1b069e7d0f2615247f2ef6520e70b885215ff6443c4614f7bdc39c3ff"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/storage.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "befd8fa2839b848a",
            "equalIndicator/v1": "1cfdffecf5eff87dacc24737fe3c16ff48268545dbf813b3c8325bdc9d2d8cd7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-supabase-upload.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 190,
                  "snippet": {
                    "text": "import { createClient } from '@/lib/client'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { type FileError, type FileRejection, useDropzone } from 'react-dropzone'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "28335b2ccce57efc",
            "equalIndicator/v1": "1d8418ce89e95a839f1a21e0b1fb28d93b08aa8ef10ab0edbc67a212651006b4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/contexts/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c662cfc20d202670",
            "equalIndicator/v1": "1e4dd37471d9e6573229c75a12ecec11b712940360d8e12da80483a742782787"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/slider.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cd864f074237513f",
            "equalIndicator/v1": "1e9ac07fb180f593a2e90b776fc2be46f661efa1b3211d22e63ac519a3cb3b1b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-avatar-stack.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69,
                  "snippet": {
                    "text": "'use client'\n\nimport { AvatarStack } from '@/components/avatar-stack'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6587921044f802c7",
            "equalIndicator/v1": "1f2cb1f18b1eba915dc23806c2bbea9275525c0222b6dba73df030881d4b125f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/collapsible.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9a51a8b8c729aa37",
            "equalIndicator/v1": "1f78bc44a9f1308f6588dfa8bbaf5df62ccd86488b5536d7243d8d63f9f72b69"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contexts/SheetNavigationContext.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5394f005bc9a6d21",
            "equalIndicator/v1": "1fb841f5d4bc68a9c8863a6ad0219165e466b44913d57b64802d6e149a7e6dd0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/calendar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "05ccc43fc33f0b65",
            "equalIndicator/v1": "1fb9024679b7de8ef689c2c2b07dce40bff4cdc1937020fee0c0e90fe46b4009"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "499c8886aeb72040",
            "equalIndicator/v1": "1ff58a9f1453fed0c37a478f784dee14866d9125ef76a8559bd301e9b291ec02"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/table.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "21450f69f4a2fcdf",
            "equalIndicator/v1": "21b691ecedd98c3c5694b2d765507e7da7414e62bead9689e73f9598c941a8a3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/tokens/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f715dcaec909aa1a",
            "equalIndicator/v1": "2265e659dfe327fa4d9bd044553f122d0a0790527edd7c9bbae639baf5406b95"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a1ffb3bcc18248a5",
            "equalIndicator/v1": "22edf777407d363b90170ae6f77b20ce5eb85b51cdec0a0390007329de602337"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/dialog.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9032fcf4e61d6e07",
            "equalIndicator/v1": "22fffa5d2b1c8fcf423ef1cea5cbcd0e1b42e8fde532a35b39dfa80a43e43291"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/header.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d20363059c315b29",
            "equalIndicator/v1": "23c0e39fe2f2cf5d69dee72c6df80c98c7b90086a93ce7cab7efa192e56e6f09"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/pagination.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dc14c61660440b86",
            "equalIndicator/v1": "23fee558d0692a8633968039e5d8a4db096692ce2ff6b95a0292d163e76bb667"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/logs.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d093fbc334b9d4bb",
            "equalIndicator/v1": "241488b1cf23298e9c6513d7a0f891fbf98ff8b7612544affe0a6213dde446da"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-chat.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9b25700092e1cdeb",
            "equalIndicator/v1": "24b1be7705bb21c869ea3d72e0aea96fc6096a229cb37fb4f89d7f96b0023e67"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/resizable.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "40a74fea471672f0",
            "equalIndicator/v1": "2546a72e7de32fe1a1940aa0ab5a3a5c52d855ef0632f6a5e52534f24d214630"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/tokens/colors.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "619ca1df81622467",
            "equalIndicator/v1": "25b67dd69af1445eb5690e093919174a4a12a7b2c478840bb88b817ecfa0335e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "080d650c2e86c022",
            "equalIndicator/v1": "25cbcaad2a072baa34cb30dc7bc3ab7138feb82972fab6834f170ce3c0c35af8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/scroll-area.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "328e80249309ff24",
            "equalIndicator/v1": "25f01119a46e3ea3eca0106dd6369885e39d7f47f3543424ae6547a0acda0c45"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/input.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 83,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/input'\nimport { forwardRef } from 'react'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "86334da1ae5ad0ab",
            "equalIndicator/v1": "25fdce84ae4a67eba29f16d633745adee1cbfc1fd7c3aa5b975dd02f67c1771c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-suggestions.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "15225966df5957d3",
            "equalIndicator/v1": "2669702ebfea36c2f7efa86515d555b7ec54711e962240b1fb3a2da3b1992df6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/switch.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7f7e76d1b8f9c10d",
            "equalIndicator/v1": "26a4ae1998055d0131bacb8cfef8d1b5ee6dba7a7ebd17bb4b9d548bdf953724"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/server.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6e7d157ca0eeb49e",
            "equalIndicator/v1": "2700f68416ccc82ca328db98cf08397caab4b136faa9ee7c813107b7ede46b61"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/brand-utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 117,
                  "snippet": {
                    "text": "import { brandConfig, getBrandClasses } from './brand-config'\n\n// Utility functions for accessing brand configuration"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fbc007e88f34d207",
            "equalIndicator/v1": "29946179cf6cb0df1511d027fde4ca038758749ac324b82accc352e79d01212f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/avatar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3b024840025ee1c5",
            "equalIndicator/v1": "2a05ff9c8e4667d824510386fdd6205b16c6c16a24ff7eff6ed40c3ae1d7a907"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logs.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6897f540992922e7",
            "equalIndicator/v1": "2bffbbf1fdf359a9a775431976920c59d79a7b8394bd134219432d8025be2cd0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-image.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 88,
                  "snippet": {
                    "text": "import { createClient } from '@/lib/client'\nimport { useEffect, useState } from 'react'\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "710ee9b339ab60aa",
            "equalIndicator/v1": "2c9e2eddd041c910b131694b4e6d76c5b35fb9433ced90c1fe9673c9b2c49a1c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/content.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4f09dcd478164478",
            "equalIndicator/v1": "2dae2af89bedc818c7156d051212bea834255f062f6e06cbed73aad4a057cc81"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/skeleton.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "547511d4b57f1406",
            "equalIndicator/v1": "2dd60cd506f91adc5a9984095d436af95b3d0700521f90a1eda74972df8fc959"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/schemas/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fa94371bddf72848",
            "equalIndicator/v1": "2de2a0f51b13ac44a250140574792f7ef8c9da1f27d4e9e50333016c7ae6f951"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/textarea.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a227904056ec5b2",
            "equalIndicator/v1": "2e592560245b7dcee26d8e398414c6394d4489c3042641dbe59de36e989cd4f4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/navigation-menu.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 152,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "052efad8591285c5",
            "equalIndicator/v1": "2f79903a7c544272a0dccb12faa86792603ade5b595cd006b4380d9993e83c88"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sheet.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b2d132c50468f5b3",
            "equalIndicator/v1": "2fc71d5b62dfd19711fa251ef6ad7a1237ededd44b60703cde63b69be108d633"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/badge.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cda56eaf84afd31a",
            "equalIndicator/v1": "307c72d353bf73d04b87142e57d8bc209f4f1c92a59050a9595f7eb5b102dfb8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/database.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8c4808a431d76604",
            "equalIndicator/v1": "31546f856712e8b2fcc2762ed62eee64be0d4038c704790c146a3bf23d86c302"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/schemas/secrets.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 63,
                  "snippet": {
                    "text": "import { z } from 'zod'\n\nexport const secretSchema = z.object({"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46aecc257ad2884a",
            "equalIndicator/v1": "33b4391d01816246f1e5e9417851e1ac883ce1f7db7fb6edcdadb156726086cc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/switch.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9aac3b0c2a4ca4d3",
            "equalIndicator/v1": "33fb3e64b5a485f9e2a64ab51c2d6625778598dfb20f05861804e9560bc25b35"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sonner.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c4dea01dbf647946",
            "equalIndicator/v1": "342a1f4b3a27c4146756a6952b96a0be3b26df128f95fb102858af6bfa8599b2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/tabs.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5cbbad4165c07003",
            "equalIndicator/v1": "34a67d959f49b5aea3940aaa6abda38e70a944220dcd1e676bf735763cf1efa4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/tokens/typography.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f6eb6ec0efc1e912",
            "equalIndicator/v1": "3544cb9d05763f4f89164230ba4f01eeffe310d9dbdbd805b4957de5f64e8c7c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/alert-dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "848836c2d01436cd",
            "equalIndicator/v1": "3703838777151fa8a649983d678311ee5c9c7c21f1393ff3b95a86137bfee6f5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logo-supabase.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 115,
                  "snippet": {
                    "text": "export function LogoSupabase({ className, size = 24 }: { className?: string; size?: number }) {\n  return (\n    <svg"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "de6a839e11b04665",
            "equalIndicator/v1": "37bca214aa8c1091178dd7046aa5c64a23678f1c74340f41cea304c201ffa22a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3603549953a459fa",
            "equalIndicator/v1": "37dd206033e149dab9ce2cf0a5a1721c8257472ba226d779e20f41f15ed42e76"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/results-table.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1723dc13b8025735",
            "equalIndicator/v1": "3821fbc273439f74b1404c3c40449e7c27517545a9b91837d4473084c8071e05"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/cursor.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "import { cn } from '@/lib/utils'\nimport { MousePointer2 } from 'lucide-react'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b834f250fd493311",
            "equalIndicator/v1": "38b981c0c27ecdb52b201292e10fb6383d462b8a2fd6ef8fa6a90489af7d684a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-legal-links.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 68,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterLegalLinksProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1806fa955bc850df",
            "equalIndicator/v1": "39251119c5482a764a56d294177e957c5a0a8a3763b84bc6f26da0b7c8f70e34"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/components/ui.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "31cee38364d66b10",
            "equalIndicator/v1": "396b5555b141195eb4437e50808fa64658a6daea5766b11053820b041747d3e2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/label.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "10ae4a2d2097cff3",
            "equalIndicator/v1": "3a9d970b04bbbc4fadf60b9d7b8121149607935f228756ec73c44df248171507"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/input.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "819f807ebb2b8091",
            "equalIndicator/v1": "3ab6727905de486974b58bc8d6dc78753cd131b7e3e41434f7090a95d548b728"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-cursors.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ba5b373e455d75ec",
            "equalIndicator/v1": "3ce201cb7321b6a7042e710d2525f34cf980f5331c336859277d786f8e947274"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/carousel.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "620245c7967db0c8",
            "equalIndicator/v1": "3d4e0c9894d2a9201cd7d012c0c43dda8bfa7781a840d18696184eb8bd5fa746"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/realtime-cursors.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d84193df385bdcf9",
            "equalIndicator/v1": "3da7e497162a771cffe23b6d4a59fc6b5b9efb02e85b8081baa05d3db241969f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/utils.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "02a351cd5e690d72",
            "equalIndicator/v1": "3e56867b69031d5486665cdd2a97bf2f4beec09ea4df295b78d1f2d056966ceb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/heading.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99f381fc7ff0cada",
            "equalIndicator/v1": "3e8e3291051fe6ffd1340033ae70f1582e725c1d90c65aea2ce7d10446458288"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/link.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "import { brandConfig } from '@/app/components/branding'\n\ninterface LinkProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "749ecadd0812c786",
            "equalIndicator/v1": "405a02d44fc198c274d39cda9e81766175c38ca5e796f921d8995b43f6bba102"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-user-counts.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "55269810080f6260",
            "equalIndicator/v1": "4094128dc7755bc35f7c0e8a9881aba253cb5ab37e7d27587b5d5949cbbfaca2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/forgot-password-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8d8eb139db3d54b9",
            "equalIndicator/v1": "409bf3c13aa5fe34c5196d77925e51786e673b6e7a08b2fec13f24f90da7481d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/brand-config.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "// Main brand configuration - imports from organized token and component files"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 179,
                  "snippet": {
                    "text": "// Main brand configuration - imports from organized token and component files\nimport { typographyTokens } from './tokens/typography'\nimport { colorTokens } from './tokens/colors'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "084fe14650653cfe",
            "equalIndicator/v1": "41c0d68af8f9a7ba9bb1f890a711b0be63a75115ca8ec3dd45e0b8c171514c44"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/page.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "817a6152e8f5909d",
            "equalIndicator/v1": "42c7cf1d34d56c6525f4c45c8a480aaf9eb656d922d94e88b88f453d79134b7a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/actions.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2aba168d126e5cd9",
            "equalIndicator/v1": "42e9ec4e7c15845a821030c762def17662f799c5b3115a92f56b55f28f2c140a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/header.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 58,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface HeaderProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6285066ac7c192fb",
            "equalIndicator/v1": "43502324a04d7d9b0910b5a0a05583988f07c207bc5fc985028a222296833d61"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a223958909ead182",
            "equalIndicator/v1": "4430899324d5c4fb8b59ea02592790370d2b6aaee25fc7b7b2ae47f2af1ca1c1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d26d1c85c92cfee",
            "equalIndicator/v1": "452b0acaa8d702588e2fbdac3d9a3bb090a82ad704beaa5a1616a22a0900a87b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/header.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8cac37053c6e5f92",
            "equalIndicator/v1": "454bbd3bff85bda7f51e76c86a38c302d58a85c7c50e4bea04d96520e2a10fe0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/menubar.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f31da122c0fc7399",
            "equalIndicator/v1": "45bf41fbcd8d744b7e2d4340dadc980071c57e1238075e771415455db7f372df"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sql-editor.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f6e7e1af5f4f39fe",
            "equalIndicator/v1": "45ce8cc51cdcdf5c5a2f701b8b0894406de27b1772fea7e80410680868fc94b1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/select.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5897cea94eb32b78",
            "equalIndicator/v1": "4639a4aac513236260bcc37ee3ebae401bec8e433ae0f5b5b14b6c2c6c56f65e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/command.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1fa42611d9adf4ac",
            "equalIndicator/v1": "46f9471349014c117f9650c4dee6f71c83b276d6a898ea23570207226d0e6f88"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/toggle-group.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "735a2bf713d3b1d8",
            "equalIndicator/v1": "476cf5adf5aa0a6f86ba35fcaafa2937a04ac7e932d9e24d143a076a33287fba"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/table.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2c0b57f30e920720",
            "equalIndicator/v1": "480f97fd7fc6651acc15a84b3e5b13e394b605632a7a939c1322a5ecc13c8dcd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/tooltip.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7fb6a7c1760da52",
            "equalIndicator/v1": "48bf53f98bfbd9fb64dffd0f4bc9b9378847556753ed37c6d75eea564ea50fe4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/select.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "80194d9a30955595",
            "equalIndicator/v1": "48e60ab31ee61d4e74174d28fbda28c9a5b0a1306aaf93044a30c42ecb669c7b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/database.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 68,
                  "snippet": {
                    "text": "'use client'\n\nimport { useState, useMemo, useCallback } from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a462d168952d9587",
            "equalIndicator/v1": "49077fee1af24791767c9adb5b04405206133e73856eabdc30b6fbf416323f3f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-storage.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bcafd8104e67e9bd",
            "equalIndicator/v1": "4943d7e317b30b74aa77cce296f018e82c17d718895856710430f7937aae9806"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/menubar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5f8820cc89c21f72",
            "equalIndicator/v1": "49b464c7f0df043eb229872056de49f565543ae4a0e5691aff41d74cc7260800"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/background.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e6ee61f95bd7d376",
            "equalIndicator/v1": "4b391bdc95b42ab14cb6fda4f1e23e68273c3711d481623ab86e2bb6ccd23f45"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/components/core/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 157,
                  "snippet": {
                    "text": "import { Section } from '@/app/components/core/section'\nimport { Heading } from '@/app/components/ui/heading'\nimport { Card } from '@/app/components/ui/card'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "df81f4ef8ea5f68e",
            "equalIndicator/v1": "4b59ff05480df72a0b0c27bc4afa9d59dad862f4f138e0746966810d52f5b104"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/dialog.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/dialog'\n\ninterface DialogProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6f6184fb68712997",
            "equalIndicator/v1": "4c03e247f96e29e5888f8f3c3ef073e934d4018a3c3f6b7f2e6be4aa83c2e1a8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/client.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dedff63c1a352698",
            "equalIndicator/v1": "4c82acbc95f2a84467dae9c8d10c78696ce96c7f3a5e7e72644c9988b1795fa0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/select.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "47965789da95e060",
            "equalIndicator/v1": "4d1a16f2be5edbe4ffec948f264b8dd95625cd8d5f3d2d739971bdaa24f30c7f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-chat.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7d293ef577b018f1",
            "equalIndicator/v1": "4eb3ca1e2ac258eaa823dc58a05fbdad036195b56f1538d510bbcb7909d0ff4c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/hover-card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "654d57e5fd934184",
            "equalIndicator/v1": "4ef545f77555006c69c0258d545741cd55dbd5519635143d34277fdd85411cf7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dbd37317fa121a8e",
            "equalIndicator/v1": "4f9370c2292c1f727820de2668e337f5b4e496648e46a1a69c3d2c79bc0c7ec8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/forgot-password-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7515e57cb3cbc6a5",
            "equalIndicator/v1": "508e4335c2469b06a54b2ab321e06652adf04a0c59ab1c75860c5e13e3d1bc43"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/checkbox.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eedc49ba967c592a",
            "equalIndicator/v1": "50afde8e1f5def683c1a8a286f2ac607c98d2bc35b4507f2357dfdead7b919cb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/breadcrumb.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d0cf172cd10b93f",
            "equalIndicator/v1": "50e0837d8fe2516e81be3cb41c7330ddcf482c672d62e45c60c8c41890461c89"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "988538f2fc093d16",
            "equalIndicator/v1": "5116ff74784a0d4075eb9cf5dc8b49b48b34a4fd1af74cb0d89b8341853744fa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/components/core.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "140263ba5cde0f10",
            "equalIndicator/v1": "52b06883818ddca7b7dcf97b4ef7a268a0b9f0fcd4c233291777cb19c43a75ef"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/users-growth-chart.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "'use client'\n\nimport * as React from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "10c95968ebaf5fcc",
            "equalIndicator/v1": "533404e8329ea534b9a93f2183c99e3871691772ff23c2b3ddeadd4d0a99f9ff"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "178e4a93da852325",
            "equalIndicator/v1": "53dc80ad5af5b81c7cf6672186a6f1e41a05b1e2d30e5f8f85d176cdddaf89e4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3e87a82bde034fa5",
            "equalIndicator/v1": "53e1b4aeea0b3839e0103240939db971c9bc4f4eede7afe15530f019eac4f5bc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/input.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4b30ea6c0bd10056",
            "equalIndicator/v1": "53f61907524195d4b8b5452630cb185cdb89526850918b4802f528f7afe87787"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/components/core.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "// Core component styling configuration"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 86,
                  "snippet": {
                    "text": "// Core component styling configuration\nexport const coreComponentStyles = {\n  logo: {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "00494cc355f3cbd2",
            "equalIndicator/v1": "5425798774b8bc871a1ed0e8021807822b471d143367eca99f1d01d1ef2d31aa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/components/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ef444c25cef16a75",
            "equalIndicator/v1": "555964b07ca33d4620b1f4bbb2229a32a53f48b6c56380dee2672d120081baa8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "29f75621e3ab45b0",
            "equalIndicator/v1": "55a29ca5e8f003526139ddecea99059f628806519fc9e25571d6ae7110d93b13"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/slider.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "64e723860c9d90a5",
            "equalIndicator/v1": "55ef1c808e28da126b778a2ce3acca49450d6eb94cb37b31638d1c458b5d1c00"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/textarea.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "808de94cd9118aa5",
            "equalIndicator/v1": "5613b3f88829efe8bf6d55816e7f010574b9d20808849b6766f73704b95142b4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/separator.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6612dd7fb38f3377",
            "equalIndicator/v1": "5671cdeb2be504ebde21f9f1649bfb0fc4d9cf7462beb55f7315f45b09e67c83"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-column.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 64,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterColumnProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "044783b0a7d5ea47",
            "equalIndicator/v1": "56b3d01015feb6c9bf144f10db5c38c628b9c93ee3c10c3a7a20e14dd5da66ae"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/forgot-password-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6f35c9efa2b0d9c4",
            "equalIndicator/v1": "56d6c3c7c4a7198fc9df4d6383eb539cd0ded2dbb1e5da8acf31dba2fbb3ee92"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/alert.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44d21a67318ee9c4",
            "equalIndicator/v1": "5717317a5949f42e0c5756e2b4ef9334e26cd81affafe8b89ed77e54f8e1e941"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/auth.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e841a3708ddb4f5",
            "equalIndicator/v1": "571969aeec697288a46013ca2460a06c63a8c6d050a4b6e3926651735d8fc1a1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-realtime-cursors.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a839eade250d7fdc",
            "equalIndicator/v1": "573a2cca7e0b2a4b981f777391826e85e4858634a8e755fc2be6608cfd5970b2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "scripts/extract-qodana-issues.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 19,
                  "snippet": {
                    "text": "#!/usr/bin/env node"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 27,
                  "snippet": {
                    "text": "#!/usr/bin/env node\r\n\r\n/**\r"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3597ba541dc485f4",
            "equalIndicator/v1": "5844dacec1bf3c2ef328d7d697747b2daafb756a55da5b3fd1336d797397310b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/toggle.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a7bf7ec90773e1a5",
            "equalIndicator/v1": "589a8f84e0b195af759dfb63bf85505b053d7aff07b4894223f74b3b836751d0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/layout.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 155,
                  "snippet": {
                    "text": "import { Header } from '@/app/components/layout/header'\nimport { Logo } from '@/app/components/core/logo'\nimport { Nav } from '@/app/components/layout/nav'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f6caa2e27c18110c",
            "equalIndicator/v1": "58e9f0f0492a3c1f137c600df2700236998fe1fe554de46c70dadfbf008850b1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/login-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a8b60bbcb807b6c",
            "equalIndicator/v1": "598d3e7ad09d745916d25406ca12eb49fe8409827003ac7756ad711ace5881b7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "999da077e5dbe007",
            "equalIndicator/v1": "598fb4e4ae503e85bb4f3322c14f9e8f8d0c618defde6f6570a92e6f44eccd6c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-infinite-query.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "082d56e61b6847b1",
            "equalIndicator/v1": "59aa01871e7e2005254c9653e386909e00d66dafed9c41a25d02d7560387553c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8b35d22f5b70cd82",
            "equalIndicator/v1": "59c5bb75d1126d44601d8f5ab6e952a334081c8acbb647e90054167b26097248"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/sql.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b5225d1ca682bfdf",
            "equalIndicator/v1": "59f7045d391e24d4dcec1bc2ef23003493eaf7ecf625fefa79a1195e64952f1a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/command.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e337ea8fce182a5a",
            "equalIndicator/v1": "5ba368c013503a9ca2353351e93eb9848184648c2f9126eb2d4e513935d28555"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/progress.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4d9975c9c0b3163d",
            "equalIndicator/v1": "5be2b6ef650e8beb57b39c813926b8b8a8cacbfffd787cb9e8e3d9c3b88188a5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/text.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 90,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\nimport { brandConfig } from '@/app/components/branding'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d2bac7e0e678770a",
            "equalIndicator/v1": "5d5316b401adcd78c16c1f232e4f33c0052bf778be70a86e6e47a8c73b445fce"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/skeleton.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aad5791be9523f8f",
            "equalIndicator/v1": "5d84f5ac5bac2e20b312dd635ee15d1fb37e1a39957915d4cb5454b849bf67be"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/chart.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8e9e83f0d2e09f19",
            "equalIndicator/v1": "5de87cff0d9816e92c358281152f6b7624eb4d2cd5d2b91d4a8f5cc068e3bd93"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/sonner.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d196e36fa5b1390b",
            "equalIndicator/v1": "5e8b774f49bcd5f040e9bb3ca8d4fbb82ab741a6c63d431488593b30cd5c8a2f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/toggle.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ab813d8ce86c77f8",
            "equalIndicator/v1": "5ee58f882c790e264c529841d824738cf0ec84f3d58152c6ef6aae1a5c7a1bbd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/dynamic-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e54d1fa5f5fcb01d",
            "equalIndicator/v1": "5fd4dcb8f039575c5d93679b8cea0ca92bc831ee8da800ee2f7a34b276ba7e30"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-legal.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 63,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterLegalProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c3f646ff3b52d37e",
            "equalIndicator/v1": "5ffb5f0d504580f4874c10bd975ee29e4fb43e99baf22287c34ef36fa8d36c07"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/resizable.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ad7813661e521c12",
            "equalIndicator/v1": "6022e66ddc3ff2a0b21ed65201a480101de5ed3b53956205230f59be0d5b6660"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/badge.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a225b29d42ac7321",
            "equalIndicator/v1": "6081dc135c6cedb0e41b3b7014032040a85dd7b34cce9b5f7739ab6b4f15158e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/avatar-stack.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 191,
                  "snippet": {
                    "text": "import { cn } from '@/lib/utils'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1b7be092053a6b9c",
            "equalIndicator/v1": "60b34a8a10f5b438453709e623b36d5d5bd76dce1b68163337eb0498bf208afd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/logs.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "38c23d91a5cbbd5e",
            "equalIndicator/v1": "60b7bd848137db7caa118c3a5b7fd82a2a977f0422283b4bcea549e4d48a7e6d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-realtime-chat.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5bf97f5572d172df",
            "equalIndicator/v1": "6104a476657c7aaf8b683bf8d1f4163ad7ad20bfadfd0ed5ccf4f5abac62734f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-nav.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "57882905176ae80e",
            "equalIndicator/v1": "614dec99b6d5bce762d55355551cb82b14358fc2d8eccb20a62c2827958c1362"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/schemas/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6a63d7e6f6318728",
            "equalIndicator/v1": "62160fdfa2b79f9e6d1b5379475af47857847951de78a8ca54ff5e40d348d89c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/login-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f0863ce745e583b4",
            "equalIndicator/v1": "62549dcf026c6ad8a6adf73148f12ac34e2c12d492afc16ae5b107112c45539d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/realtime-avatar-stack.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "681cbbc141eb1b09",
            "equalIndicator/v1": "6434e44742626bce781da9cca38946175be8b4910a653829246b865a503ead0a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/brand-config.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a04a0da5a5d71c4e",
            "equalIndicator/v1": "648926ca92964100d3bea82747b168a7918106561ae59455c4684575fb253b6e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/badge.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/badge'\n\ninterface BadgeProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9682811e661689c1",
            "equalIndicator/v1": "656a5eb8dc643ba9aba44f2dab801bbe238a0c3f1676761f60837e85bf576c21"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-info.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2540eab17cd06a1f",
            "equalIndicator/v1": "659a2455c54e1259f434068288a36b4d87532eda1a391541551b3bfaa901e9d9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/tabs.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "48710c1e2cda6e7e",
            "equalIndicator/v1": "660ea83e5c8495ab82829a3c5a096b413191e0b9c2ee628d0a1a3cba450241ea"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "88a5b24a3ed6bb29",
            "equalIndicator/v1": "671197729d1718debcb60ae96e9bbf9aca34a44a0d6970652de3118ec6a16370"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/switch.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b580ffed7a1b933a",
            "equalIndicator/v1": "67985773ac9f83932d8b7ebb4e55c243c64516ee3c369a7776934245a4193795"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/users.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6427d132bfb5fc5e",
            "equalIndicator/v1": "6890d0c71575008c6a063b9b2c3b8eb2878bfb13203888916f4c64c8412758b3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/drawer.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "648229beae05bd1e",
            "equalIndicator/v1": "6a2da244b58e45c779fd4d0ca2110241fa33ccd453daeffed96522b9948900fb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "05915d9079224891",
            "equalIndicator/v1": "6a6186a31d8bc7381a91faa45d7a92e1ac38795d8c23fb877f4acb64a7900821"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 58,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c26d5e1ffe7515f4",
            "equalIndicator/v1": "6a6e9ddf039b1117a0b694416a8949cdea131039c77e43539f982a5e707cd190"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/content.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface ContentProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "171e93efb0b500ba",
            "equalIndicator/v1": "6b30e5a8663cd76199db3ec3ed8ea69fb0daef37ec6b5e75f4df2c3cd1f75bd3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-infinite-query.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 66,
                  "snippet": {
                    "text": "'use client'\n\nimport { createClient } from '@/lib/supabase/client'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d6b89d92b948517",
            "equalIndicator/v1": "6b93882582c3fb2e31fef5579017dcac3541b3c08fa837105e97f49f7ae8bea1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/components/ui.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 37,
                  "snippet": {
                    "text": "// UI component styling configuration"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 84,
                  "snippet": {
                    "text": "// UI component styling configuration\nexport const uiComponentStyles = {\n  button: {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e69b3b2a3776f71",
            "equalIndicator/v1": "6bf87210ee4a9882ce7909cc17b9138c22609f3f8045c019a047e9b402100e88"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/logo.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d9ea0cb526fb8989",
            "equalIndicator/v1": "6c1a487664892a60170da7d1ddd21972ccb67991c3036bd8ce7a0b0db3805ce0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/skeleton.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 107,
                  "snippet": {
                    "text": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "64deec48079e38fe",
            "equalIndicator/v1": "6c26e392829d3940d8e1cf0c4299632bf3aa241816ee0de1cd0eb14a04d16548"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-suggestions.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "987deae7888e8844",
            "equalIndicator/v1": "6c490a167532a494c3431b5c7f6323c7f3872a325a4373e3a1310034f9200ede"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/toggle.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6b6671fb7a433649",
            "equalIndicator/v1": "6c79b5d9c519eb44b8e26c5401b66e48912afe18b54c1fccc36c1bcf671d292f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/server.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "036e7bdb485e0db5",
            "equalIndicator/v1": "6c9f66aaf1e55164acad7147b1ded733df236f0994de86299a4d56f3a62bc44c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/components/ui.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7ba363eb957f9b48",
            "equalIndicator/v1": "6d3955b1ed05ea88936e21738b4cd14ec0415f7b3f7947d6e10946db57839f2c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/index.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "'use client'\n\nimport { ReactNode, useMemo } from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98a3551ce373d170",
            "equalIndicator/v1": "6d43d8d83171b771bf6528ea2ef9d241be9c135afce33df56d730436c91e5b65"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-legal-links.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "76c66478c7e6c88f",
            "equalIndicator/v1": "6d80aaaca563682c95c84677949de294c0653af8dc532b468693d13888c1ba33"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-presence-room.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "'use client'\n\nimport { useCurrentUserImage } from '@/hooks/use-current-user-image'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5f6c3a3e6c4178a1",
            "equalIndicator/v1": "6da4ac4cb21cfe7c58a73ad6057a8c6989ce430aa42228122017024020ce5c30"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/utils.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 86,
                  "snippet": {
                    "text": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f49462cc11e5c509",
            "equalIndicator/v1": "6da60d011b61875a1bfb0a75be5789d105e13f215d2481986de99367d9b863ea"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/management-api-schema.d.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 74,
                  "snippet": {
                    "text": "export interface paths {\n  '/v1/branches/{branch_id}': {\n    parameters: {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8c41e5790ddc5afd",
            "equalIndicator/v1": "6dbf9ff9adc0157cb0a81a6b3bed6bbf9efac3efe2c3852c831b707a18c69c15"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/users-growth-chart.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9cf05d66eaa79010",
            "equalIndicator/v1": "6ebd62a8b28e488d742b2e6c414ddd67d53557d4e03d425d5fdc1b1c64010b28"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/sheet.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5099099326777c69",
            "equalIndicator/v1": "6ecc79ecbd6cb2aac637f5333b8722971bb76bfad3bafc3d36ccb2966da3762f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/logo.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 110,
                  "snippet": {
                    "text": "import React from 'react'\nimport Link from 'next/link'\nimport { brandConfig } from '@/app/components/branding'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c667152ea232f4f0",
            "equalIndicator/v1": "6f0ee1ac44c1143e19253bd4661ecdb99cf98743353ac837d1e4e375619d1c6e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/database.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b78d0d9b4d32ffda",
            "equalIndicator/v1": "6f32499737dbb179057a92b88b3c7e75e7d49739f561503c57b41eaa3377a5e9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/radio-group.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a578120ca0c816a3",
            "equalIndicator/v1": "6f3c7469768f51c6b4d3e2be0ae18518e40d32344d9a46f7bc5617744101fa0b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/types.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 75,
                  "snippet": {
                    "text": "import { z } from 'zod'\n\nexport const postgresPrimaryKeySchema = z.object({"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aedd767cbcb34a15",
            "equalIndicator/v1": "6faa406d28644bcf31916c1dc7aeae6b8ba512625a061281bc6f0c69c02c6fe3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/actions.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a1b0adba3af905b5",
            "equalIndicator/v1": "703eb30fddb2250acf8cb4ab0462e9d25f94e25fc19a2676599abc4944dc09ce"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0bf956315efaea66",
            "equalIndicator/v1": "7128130b7e4eb54f97f8313d15d1582f2066c8712437fd1ee4de6a82753ebdf8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/card.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 64,
                  "snippet": {
                    "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "270497e0d5595b79",
            "equalIndicator/v1": "714742567be9cf240115cd15a0832adc07791661652fb1f79faf00427832f14a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "294b01653f4316b2",
            "equalIndicator/v1": "714bd218a2deb269be11d4293c94dc41c0cc37112823278c46bf793278d891c5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/accordion.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a2894a6780805805",
            "equalIndicator/v1": "7163b14fb03f06c3b03e8e938e6fb7b59e524b2cd68406e5f33899b678f823d4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cadf354369c4def0",
            "equalIndicator/v1": "71677e1f01bb96048207de60dd29e033a5fcc1f9d5263039a105bc8e0eb0024c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/label.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 123,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/label'\n\ninterface LabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f38640b8c489404",
            "equalIndicator/v1": "716f861950b5923bdd05773fb03cafc98417a9aa62889be697b612e4c91fbbfc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/navigation-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6261936fa45e2179",
            "equalIndicator/v1": "71f023496fc84379ac5e7804533c3d725c671ba316aba2d10f603394aedf2a35"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sheet.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "94c3d150c3879e96",
            "equalIndicator/v1": "7207c8745c43d7a513f08bb6e92005473847eb56a2251b04a4c428d6ba5a8c5d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-auth.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d53c029f3570661",
            "equalIndicator/v1": "72c3c240d5574eed33c7ddb9fa01a4d1d0e8fa44cb1a52748ada7cee2734944c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-chat-scroll.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6ea120c89c917d93",
            "equalIndicator/v1": "73304948a6714bcab87a0a35760f0c6d179851324109cb04dfd9afc6ec00038d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-column.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "de852473d7b29cff",
            "equalIndicator/v1": "7336264446ba82e21a77b5411d1992fb21852a0f04c19a8287edbbcf28b1ad54"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "589ff5b9539c2066",
            "equalIndicator/v1": "7434240f8329d189fcda7f16adfa0dc69d71f74d3db5fd0ada2bf511702b8433"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/auth/login/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 116,
                  "snippet": {
                    "text": "export default function LoginPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen\">"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0ac3697103d9ee33",
            "equalIndicator/v1": "745e3ff419de06fd385e00cdf6ce309e99bf1a41c8bd075b427709603aa573ca"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/sql.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 63,
                  "snippet": {
                    "text": "export const columnsSql = `\nSELECT\n  c.oid :: int8 AS table_id,"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "77b645102a98e9a7",
            "equalIndicator/v1": "746ec004510fc3edc166175dfaa04c74074a0ed648846d0f55246b36c1c7a5a3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/suggestions.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 39,
                  "snippet": {
                    "text": "'use client'\n\nimport React from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0e9f7aa69923f11b",
            "equalIndicator/v1": "74b407aab4bfe5d80db737d6c632835507ba78c7986f8f9237c41f9e84db5a56"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-logs.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8130cff8d7095bea",
            "equalIndicator/v1": "7571ffe84b4cad07602f4544064a8b1425a0ef4c65da8997c3eddd5edb569791"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/chart.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e0e044cc435e506f",
            "equalIndicator/v1": "75a6508a392d222d1bd90e3bd714de6e87e364b187f5a14e9e38cdfb76caf86b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/drawer.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ef360d1ef28f0f6b",
            "equalIndicator/v1": "75c0dfb21a339c7cc1767df69ddcfd6d7bef96fa52c9a26eb0ea869a18902e19"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/metric.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3e87f28f605d3f74",
            "equalIndicator/v1": "762dd170aaf51d1780fb12d5f60626801794b7c152beb7df2b877f64f6b99239"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/suggestions.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1c370d09e2ab44e9",
            "equalIndicator/v1": "76c423647d25b136eded99ebe8d9cb1b3270dd1697381dec0ef816871a596838"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/spacing.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "18e2fa551be30450",
            "equalIndicator/v1": "77ee3bb1939e3bb9d37db93ca9e077c9769261e73590eb994425d972719c1e1b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/avatar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dc96ea39be061ea9",
            "equalIndicator/v1": "780a9c3484fb0f1b7718ac88a3b54d344deaf42cea690785e1ef9884c91e52cf"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/alert-dialog.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b517d923657f09fd",
            "equalIndicator/v1": "78298448ff536f493aab8033342a709cb8a39b6892cac6b373fc94830f3ce4bb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sign-up-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12d3b00f963664af",
            "equalIndicator/v1": "79a81226903f392ec338edfafe823f9ec00e7e2ec5e506740313b6eb852776e4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/dropzone.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "13acf49e8a0cf5ac",
            "equalIndicator/v1": "79c253a69b3a113f9a42c860c8fa0194bbfc318a2a597c59f95225cfc28bc364"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/separator.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 79,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/separator'\n\ninterface SeparatorProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4bbaf04aabe31452",
            "equalIndicator/v1": "7a71ca150c0216216341a85598623d8c78900883a5397c0dfdc0507c99417ebc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/badge.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b6331bf21fb7f5c7",
            "equalIndicator/v1": "7a97a011a41f71d10097c8c2daa326e3c594341d20ced8c1bf7dcfe50f0c0859"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-tables.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b16b20c2cb220c2e",
            "equalIndicator/v1": "7b3b15424bd815f67990174ea2f73aae0954a2509fea04e9669075e4efbf935d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/accordion.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "15cab490417f1d60",
            "equalIndicator/v1": "7c71e1d1a56525fc4297d85f777b067d4f0e249788c0924e3054a92da5aeae38"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "__tests__/page.test.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 107,
                  "snippet": {
                    "text": "import React from 'react'\r\nimport { render } from '@testing-library/react'\r\nimport Page from '../app/page'\r"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f37e8e6416aca03",
            "equalIndicator/v1": "7ee909066764af9ebab2e80998ba7c3c829e32526f5629f662efff8577955b73"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logout-button.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 57,
                  "snippet": {
                    "text": "'use client'\n\nimport { createClient } from '@/lib/client'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1ec6a6b780e970fd",
            "equalIndicator/v1": "7f9ea7cb7c75afab6af5f07e248cb82af8303ac483ecaa242dc8d49539cec3ab"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-legal.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1f46b8f6779f08f5",
            "equalIndicator/v1": "80f2bfcd42312d5ad1dd5e921e09f16bcc776b19c903176a9c23a697f85b6b26"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/toggle-group.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "13fd65f6f0b99270",
            "equalIndicator/v1": "812e8661cf634fa802c743e9e5e69618935eceb8ca8ce162d7264e494fb2c7a0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/users.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 65,
                  "snippet": {
                    "text": "'use client'\n\nimport { SqlEditor } from '@/components/sql-editor'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7f4156f389dcf17e",
            "equalIndicator/v1": "81525301b7a9d0259e7be59d66b16abacd563121f7b57da0f4f20b517fc7f40b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logo-supabase.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3f63395627f4c4fd",
            "equalIndicator/v1": "819c16bafbd23106e41a9d99a68380b0a1ac6da80f7dfbc29582c2f149f1083e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/components/core.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e3297be34fbf3ec5",
            "equalIndicator/v1": "82695108d85af0f30cc85fe978fd399be9efa325aa69ba2e20e10023359d2338"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2f32218aea173406",
            "equalIndicator/v1": "829680a9c9b506998635c49ad3e1cb2af940009900f5f41eb4a38a1a3cd01863"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/sql-editor.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "948ba903bcc1ca67",
            "equalIndicator/v1": "8296cefbdceacb0ae9b0efddfa9fa4cebe319e3dfbc4bcc715e4ffa9971ff986"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/pagination.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 58,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport {\n  ChevronLeftIcon,"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7751404c9cd6a972",
            "equalIndicator/v1": "82a28eb335139d09baa655686c2c7a841dbb01a1d5013062c3d1be9840fc102b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/tooltip.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ce2fa121c221d90",
            "equalIndicator/v1": "82c5f8b10857164d0d58d8e41aa507fbd075523818b7c5ab1950d73b1b490af3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/current-user-avatar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "75947c0e93fd1cb9",
            "equalIndicator/v1": "83e2d8a1e68168ab07ca16d0969458e4c1919a2ff3b77cf5cd3caf75c0dc0486"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/index.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7a75c7014a2dbf47",
            "equalIndicator/v1": "83ea0dfcaaf90ac0e361d70e97079768ac53d2647e7049d92110c2a9b6072dc1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/spacing.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 28,
                  "snippet": {
                    "text": "// Spacing and sizing tokens"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 76,
                  "snippet": {
                    "text": "// Spacing and sizing tokens\nexport const spacingTokens = {\n  // Gap spacing"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0fd020b6bd21e7aa",
            "equalIndicator/v1": "84348f4402a6e1674df14abfa428dea620f0ce36fb6c5ebf70d013d83f32480f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a6c58bbe1d425def",
            "equalIndicator/v1": "8645b73b1055514f65d74ef940429ef3bd1972ff1456dd7d354e9804668d0bd3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/tabs.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20d88058be6dffeb",
            "equalIndicator/v1": "86884a7eaa75abd56c9e2ca1c26ed61648b88311877c336d40e537f9365b203f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-cursors.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44ddd89e20b40b8d",
            "equalIndicator/v1": "86890cfb17124e72bb1b6029e2ee55f8fbe2d53a0cc18d7db2cc75d923961800"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jest.config.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 5,
                  "snippet": {
                    "text": "const"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 77,
                  "snippet": {
                    "text": "const nextJest = require('next/jest')\r\n\r\nconst createJestConfig = nextJest({\r"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f239d78149dd5764",
            "equalIndicator/v1": "87999cf3c78030a40c9add7983c01959206bdb876feb7ee77c9d9b6ca2990576"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0d5a6dbfb7bef884",
            "equalIndicator/v1": "88404ddfe1d8c6068f308cffcef770f88acac8cae4c193f1db8ca78f73759908"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/section.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "import React from 'react'\nimport { brandConfig } from '@/app/components/branding'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "38b8cb55c33e3740",
            "equalIndicator/v1": "886c8b8c383bb5abb033e70859a80420dbfcc4b860f536327a915e495ae9fa4c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-name.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "709a7d66a235a2ef",
            "equalIndicator/v1": "8961d2a2074cfcbeca084c197c60ff7e1e0a5f559696f11fe6428edfa8cd1d58"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/calendar.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "093048385fa6383b",
            "equalIndicator/v1": "89e172432793ff5d12a2aa915e6e9bf2bbfeaeb5f235039068874f4117e6d53b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "56c6cb075557eca8",
            "equalIndicator/v1": "89ec883055d3db6bc1765f2a4aaec429d9b7e7ee821d0e2f6daf6d0258b2095a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/brand-utils.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6a19954f3e930913",
            "equalIndicator/v1": "89ef2a28feb78caa36dad4eb439f44ed00261ab1fac8dedf0c4dfa434e18055c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/aspect-ratio.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d072a7eefda44c8",
            "equalIndicator/v1": "8add6fb1996a58d6e1ce867b64d55353c98ef391b8b24d67d439cb5a461e81e8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/nav-link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ed0734b4ce488bc7",
            "equalIndicator/v1": "8b43e86f754a1bfc5e297fd3af082468f998028e2fab445580fc3bb1019a6b16"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/update-password-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2091fc0c20b763f7",
            "equalIndicator/v1": "8cc411d5f27bd620482ab06ea4fe6852a9d10b4bb9a80857503e0cefe5198b15"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/menubar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "73a84d45a8588325",
            "equalIndicator/v1": "8d96133dec432b13fde0069ac97d6f329ad091eba153f5c2f745cec087293fe2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/supabase/client.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 29,
                  "snippet": {
                    "text": "// Re-export from main client"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "// Re-export from main client\nexport { createClient } from '@/lib/client'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "250a341cfa88f4b7",
            "equalIndicator/v1": "8dc06899e29309b4f4dc18e03dbcd9b3ac19302abf4f2e0cdf1eb3c3fd3a76eb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/list.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a5b258b8a918635",
            "equalIndicator/v1": "8ef522ae0de4c1ed9566e278eb5c8fc2f0b33a49178c3b394b7663d78002100c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/cursor.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0917f894c6def3de",
            "equalIndicator/v1": "8f6e0a0afd431673e68eb04cceead7c3b06a52593284a43a9319a647dfff7463"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/code-block.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d7e61a2d9917cc42",
            "equalIndicator/v1": "907cc12ef704163a2032223865715888fa91d17d4b2538a59c6ba1ce58108426"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sql-editor.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 79,
                  "snippet": {
                    "text": "'use client'\n\nimport { useState, useEffect, useCallback, useMemo } from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9fc88a9cac6f192",
            "equalIndicator/v1": "908a928a9f3b78f1e7faa2147f90a205dd75283746c37f6843577b38a358869f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/background.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f6cf29757e349950",
            "equalIndicator/v1": "916b436bfae759c388b8ae8e0ef33c4356f225c10911d67f37863799e8387d99"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logout-button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d628b7c3782b3c6d",
            "equalIndicator/v1": "91e1489870ad5ea7e416c27eee8f0452c821a111f3fdd6c7997acd20a4a4b899"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-current-user-name.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b4e337a2bd882139",
            "equalIndicator/v1": "926a7c53cf99e7e85bcc643448a87096fdc29eb73b87b32433cfc18734cbf5bf"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/dropdown-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3c5d2f623e90e09d",
            "equalIndicator/v1": "92973a29f212d440ab6bdb297f2a417dca489db5021c0ef7105b771fffd531f3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/auth/login/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8076eca0bbbdd81c",
            "equalIndicator/v1": "92f16f154a0aa26cd60daca0e992693d602ba47c3118f054ad81ecb397025f18"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/cursor.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bebbfec51999d1b8",
            "equalIndicator/v1": "9315e3f30a02d9b7166a3c10b7c9b560310e750c881028abb896d538dc39a566"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "postcss.config.mjs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 5,
                  "snippet": {
                    "text": "const"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 56,
                  "snippet": {
                    "text": "const config = {\n  plugins: [\"@tailwindcss/postcss\"],\n};"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "118f0c7835d32405",
            "equalIndicator/v1": "9411d74c8d21fda6b2aa29fb22aff5a610a1ee00c851047876472057ecf5fad6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/code-block.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d55b81c66c1ce19",
            "equalIndicator/v1": "950ad29c5a0231b9d2a1fe6ef71cdfa3ae137704917ee349c2de6713476527e3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/update-password-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "db6829288568ea0a",
            "equalIndicator/v1": "96375b8f273d54108bdbe7667bd9069a729a69803f75145347be1b69a34c4d81"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/label.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ce56bab9181b7be",
            "equalIndicator/v1": "967ccaa9984b98cef4a2021b8208053688795d7b2b0a8a42ecc82aa07d782f76"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-avatar-stack.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3d23304850d7e7ff",
            "equalIndicator/v1": "96ccf6cac052ae446992506d951614d1df1469bcc09876f3ea28f95c4f7ddf24"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/sign-up-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0c2a7c81a1c60817",
            "equalIndicator/v1": "975ee9c2c1dab8a5733edaa1b53e96841ade411b325df9c0ab6799d59701075d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/text.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "942e54b0a1e1a9fc",
            "equalIndicator/v1": "98e08bbcd7731af25ebcf9bcebad03081606a81cda4c08c999899324f828658c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/pg-meta.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 141,
                  "snippet": {
                    "text": "export const listTablesSql = (schemas?: string[]) => {\n  const schemaFilter = schemas && schemas.length > 0 \n    ? `AND schemaname = ANY($1)`"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "43bdd5b15d61d801",
            "equalIndicator/v1": "98f97be920fb8448302b22334c1eafccf6ab6c843af0f6dec2d600666cedaeb6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/types.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7b6dd1dbac3af0d5",
            "equalIndicator/v1": "9a9831d4ce2fe8e115e698d9321aa81db929ccca2127f5cbf618f119dcb62324"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-user-counts.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 62,
                  "snippet": {
                    "text": "'use client'\n\nimport { useQuery } from '@tanstack/react-query'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9ab8532b6e570160",
            "equalIndicator/v1": "9b0419e2a8828932e29283907d433536c6a36270c153d21e6d5856ab88051c65"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/users-growth-chart.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "00582ac50e677aee",
            "equalIndicator/v1": "9b2fc4a96cc8701998c77fe73f0b797bca34dc51df342377f7dd907e4edd3f98"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/hover-card.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b3820a13116a779b",
            "equalIndicator/v1": "9bd317e73d3ef8d4de6726d60e67db1bc20aab836351d7a54e3edcaea384c583"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/secrets.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 61,
                  "snippet": {
                    "text": "'use client'\n\nimport { Button } from '@/components/ui/button'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1980662dd064f8aa",
            "equalIndicator/v1": "9c5bcb84ef85cba60d5b9fb74a47ffcb560f730e93c0fc2b61149192a6107d08"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/metric.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 50,
                  "snippet": {
                    "text": "import React from 'react'\n\ninterface MetricProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e3cde142c4d33186",
            "equalIndicator/v1": "9c81c602c96b3fca704acf054f5ba9c73ca7db570e4a0d6cd3cc5206e2f70bb2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sonner.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 52,
                  "snippet": {
                    "text": "\"use client\"\n\nimport { useTheme } from \"next-themes\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4aa3fa9bec284ed1",
            "equalIndicator/v1": "9d0e111b22a0c3f1fc39094df2e2e4a35be7a05dfcbdee8d6fb3af5f18d0ece5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/calendar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5fcb345387b26e5c",
            "equalIndicator/v1": "9d3d195ac4d0f403bb4e9a42e1b0400bd07483152e53d39cd22326a5b132af8c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/typography.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "56b9fd4e86a31355",
            "equalIndicator/v1": "9dfe67e0440d7f21251c252347080e2a36d5027fb24a320ca1bd52a158a0014b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/contexts/SheetNavigationContext.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b1c58844e8391b52",
            "equalIndicator/v1": "9fc0c540f5c6c205db85985256ed8f98627706e994c68d74e440780993ccf451"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/scroll-area.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eded230b89eba74c",
            "equalIndicator/v1": "a08eeea180cb9166883bc15044393ce8dabb4f46a2cb48b4997f26583c0b8c3a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/login-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0e0bab2e4e341669",
            "equalIndicator/v1": "a1c25a7c875fbd6d6b72a5bb72fb39ae483bbb1905200aabbb387a8100baf908"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/components/layout/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 157,
                  "snippet": {
                    "text": "import { Section } from '@/app/components/core/section'\nimport { Heading } from '@/app/components/ui/heading'\nimport { Card } from '@/app/components/ui/card'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e5634ff488d28463",
            "equalIndicator/v1": "a1ca775b9d6e5accbc96f0fe100c48b2050de4f58cac6ca1f43d09c3d47fec5e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/colors.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e7c20c7d4b67e8ea",
            "equalIndicator/v1": "a1e53c107cedc00284a34d059226aad5a60046e4223a5caebd43209ac3da84b5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/client.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 85,
                  "snippet": {
                    "text": "import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a33ece8d8b044bb2",
            "equalIndicator/v1": "a1fd3c11d5b88bd7acd89dde66a383fcb4b8d0690d939c13967a117a5fd87168"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-chat.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5cb27de3c753af60",
            "equalIndicator/v1": "a2eb2417de084fae17c75d2611632d3b0c5181bdbf6b4629c96391ef4aaabb95"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/nav-link.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 75,
                  "snippet": {
                    "text": "import { Link } from '@/app/components/core/link'\n\ninterface NavLinkProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8d291a27f537075",
            "equalIndicator/v1": "a31d041a6e6e6bc10e31960bb5368cc2c3dd573765bec7fefcef3ae4dddb4e04"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-auth.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "58a497151c26a758",
            "equalIndicator/v1": "a44ac4554eb9d969744279fc2d25b3450969e44d6db094b012d52b398d506d1b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/sorter.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20,
                  "snippet": {
                    "text": "/* eslint-disable */"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69,
                  "snippet": {
                    "text": "/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c02e3e67b11ed5b0",
            "equalIndicator/v1": "a50f547e345deec9defdbb76778f71120d78da71c6cb90f121b41e2bbe786c56"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-suggestions.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cb474c665adfd93e",
            "equalIndicator/v1": "a550a4c53dfbbff95fc7fd78c9bd11feff8db2451066dedc0613f85cab236be9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/page.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c60a78a6b4e848dc",
            "equalIndicator/v1": "a5a7ed21702eb5f2726ca999bc7549b49b4b55756eba7bc25faabf28e7cf4fbb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/hover-card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c6dbe25b16128d4c",
            "equalIndicator/v1": "a5d525750bbebb78ab4590b3789c6cda03f41e89134189d82de5404dc518864d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/content.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f1db6024f83b474",
            "equalIndicator/v1": "a6c71ac23dfe5b73cf568f5d00a0c3f691709e9b8e6fe2140d9f1041858adbb4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/nav.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2533162fd35f47b3",
            "equalIndicator/v1": "a6f6b44dd24a4b3a8a7366eb036b6b3f939e1f2d52872921d6cea53bd5f3fbbd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/pagination.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e3353acb1d08c4fa",
            "equalIndicator/v1": "a7750e6556d427a59503c4195d3341ee1a50b6708ca3e3fbc268a7a4d8f5d3d8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-chat-scroll.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "import { useCallback, useRef } from 'react'\n\nexport function useChatScroll() {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dda2605cd460afd6",
            "equalIndicator/v1": "a7ac228a3295db5386eba80f5465d334ac4d25aa946a98bfda3cfabd7e2d4b28"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/carousel.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "974613147d62a4b2",
            "equalIndicator/v1": "a7c9ef0e5c23fb552acca540d12928bc28e9dbf9b22de74fe063a53c961e8168"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/index.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 50,
                  "snippet": {
                    "text": "// Central export point for all branding utilities"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 224,
                  "snippet": {
                    "text": "// Central export point for all branding utilities\nexport { brandConfig, getBrandClasses, type BrandConfig } from './brand-config'\nexport { brand, buildComponentClasses, getColor, getSpacing, getRadius } from './brand-utils'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bfefef24b2f23f59",
            "equalIndicator/v1": "a8711372d84195f6da09ae209535c00ca2ff993f1bd2f72f7fe2d4f3718c9b68"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/section.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d370e00febaef6bd",
            "equalIndicator/v1": "a96ab85c772f4e3d33fb8802da3527d0106a08ab312375293fca0e6cb1e1face"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ee0b520587421864",
            "equalIndicator/v1": "aa627705ddd76a651af5abe1fa91b36dcff6ca14397b79feebbee35cf1e87644"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/command.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "42d967868c38f62a",
            "equalIndicator/v1": "aa9ec669bbcb32f9866707679d9effd34625e5f042eab6a158c8d53a62cfbdf5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/client.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20f1d2e087ceafa6",
            "equalIndicator/v1": "aaa22dd776cd3697d5dd4cda48e3aa228888bc5647b90e7228fde928c1970e1e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/chart.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "83b746bb019dc355",
            "equalIndicator/v1": "ab10bf75f13777323c385e448ba0f2fed253f39954eb6eb0821c3d3f250e9ec8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/core/section.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "850c75a5e0333d9d",
            "equalIndicator/v1": "ab4f1018a8a4aa3cccad972d7e9409f0cfa9a6e85546e8d5c70e93d3395548df"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/logout-button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a673a3bae00adabc",
            "equalIndicator/v1": "ad0dfdbff5ee043b978c7046b705db64a33d282492ebcc560ba3280f38f93744"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/chat-message.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e80f83d7896f8373",
            "equalIndicator/v1": "ae1a257e9ac5eb0e967741a46e42ed265bacd1c25276587ce2c9bec66e8d413d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/management-api.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a694379cb9cafa1c",
            "equalIndicator/v1": "aea887e678df1d8dd357ab446ca373d54e3d485acda2c06cc33061a1110847fc"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/checkbox.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dd52811fb6d577e2",
            "equalIndicator/v1": "af774ec142265514b11c4950fbffc0a9d54f6a99311fb3e32a3504a638c591e1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/text.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9b788087e30a52f",
            "equalIndicator/v1": "afa06c04218b016d40e45ada337d0ec39f6b7a41394b814b88a383c5c96e200f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-supabase-upload.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "906adf58be6b182d",
            "equalIndicator/v1": "b050d6394a3b6c003c00caa23e359e61565520b8e751210303dbbc4e118f646d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/popover.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d00a111b25cab1b3",
            "equalIndicator/v1": "b075cdfd063e3f83031a6517ca5eaae7f0daba78c4bab65502cbe85602ce309d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cebd0cd6a9352a3b",
            "equalIndicator/v1": "b09509d173a47a2fc5336013b2da880ab39252c5e8ef98231d8ba48f330a1e07"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/index.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "06735c41152ea238",
            "equalIndicator/v1": "b16013e27021184d8beb6293387ae65915a92ce353a08e8a3dce2b19563766c7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sidebar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3c83b9877399cd8f",
            "equalIndicator/v1": "b1a65ca0cc0d947e5d0af3bc4d1884bae24d82faa2ed5793b8d050a429ab9941"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "block-navigation.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20,
                  "snippet": {
                    "text": "/* eslint-disable */"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 123,
                  "snippet": {
                    "text": "/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "183d92dd942d3427",
            "equalIndicator/v1": "b1c702f53aa9000219962ed4c1b4017377e8fbca0e1ff4bd37d3d522e8bf2938"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/types.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "27e5368fa784c385",
            "equalIndicator/v1": "b21e3b6995d12e6ff38c5f2553ccfe1e6243cd58e98c496bece13d7638e88296"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/breadcrumb.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 134,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8b96315ca87e0fcf",
            "equalIndicator/v1": "b26cc6281f8a1e048147a4cd979840c62f145fb8cbaa81ad75c379bea98383b3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "__tests__/components.test.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 108,
                  "snippet": {
                    "text": "import { render, screen } from '@testing-library/react'\r\nimport { Button } from '../components/ui/button'\r\n\r"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "72b2e355aa36524e",
            "equalIndicator/v1": "b277f7a774792d3bff1551779088755355a2ca7be7f766f1c14e80821cb75a1a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-info.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "03f179b11271a269",
            "equalIndicator/v1": "b2b558216361cb29c0b0674b239898b860790c3ebce8201e6ffc25be0d2fc6d3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-infinite-query.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0411655cfa50ea8b",
            "equalIndicator/v1": "b3252faca965d785620c5d7157c682800cff3dc43ca9c87e08c7ec72d4a91068"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/storage.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "401fd2c7c28165de",
            "equalIndicator/v1": "b425c46b2d559046955a6461579bc7ac2aec652d0e1e478bea2f81f34fd769db"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "jest.setup.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 61,
                  "snippet": {
                    "text": "import '@testing-library/jest-dom'\r\n\r\n// Mock Next.js router\r"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5f9a74fb966e89be",
            "equalIndicator/v1": "b503e7a8e5fb19becec0f2d6f92133802a15f6711b8993a603b57e963da2f67b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/index.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "65274efe4f4d5f9f",
            "equalIndicator/v1": "b5494fcef5c31d71a0f721d56201f8e510cde2387846511c12b1bb84955064f2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/progress.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d03aa29506822883",
            "equalIndicator/v1": "b581e3f378f6da4511bf850585ee01e442979b75426064c65aeb74fdb2a992a5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-auth.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c24e6d914ab20886",
            "equalIndicator/v1": "b5901a524990c2ab62e2249c24afa719ebb6bbdddf88a3520d91057caf5569fa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b94c2a1768e46286",
            "equalIndicator/v1": "b7e377fa3eb5a20da8e68fe0067de39da4bde5b31428e1f59b57db436b59038e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/alert.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b5b87ffe2b42fbc9",
            "equalIndicator/v1": "b8819e3c9b79ce8b90c9b31571bfb9e5fdcc6be6d43430c49cd94a05fe796860"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/logo-supabase.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d87f9c4a93cff2d9",
            "equalIndicator/v1": "ba01f93a692008058a68c1553a49eed7675a338b53ae8c1c84b57bc549b6e82e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-logs.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "da946d48ce392c0d",
            "equalIndicator/v1": "ba9d5dd4a30ffbf15160fa9c9466629958a7ea71cb970f0193ef1fda8a19bba7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/toggle-group.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6a678de00f7ea0d6",
            "equalIndicator/v1": "bd0b53b0f04271dd27614083ce1f3558f83717fb0aafb1f969cbe2c1a6cbe80c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-name.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 88,
                  "snippet": {
                    "text": "import { createClient } from '@/lib/client'\nimport { useEffect, useState } from 'react'\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6e908805deba1de2",
            "equalIndicator/v1": "bd6df769fa55544220690bde481674a3259a219c2db1e1bf5e2e6491007a2b8d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/management-api.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 94,
                  "snippet": {
                    "text": "import createClient from 'openapi-fetch'\nimport type { paths } from './management-api-schema'\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2f83a59dce6cd93f",
            "equalIndicator/v1": "be878c05bccc288af2e149d37f39faf9d456edff08615773c7bed8be723dabef"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "next.config.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 73,
                  "snippet": {
                    "text": "import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "61bf2301c959e896",
            "equalIndicator/v1": "bf7357c3cf00855b1aa2e6c293b648ac8a8e9c2e4081a9801605234b5d540f17"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/breadcrumb.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6a7e14bb108253f9",
            "equalIndicator/v1": "bf7418a27928adf2d8e72a106ae29982256f9e4b8595b5d567185ae30fef5338"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/schemas/auth.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 76,
                  "snippet": {
                    "text": "import { z } from 'zod'\n\nexport const authGeneralSettingsSchema = z.object({"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "26091d424d7c86b4",
            "equalIndicator/v1": "c13a4c494af97eb60fdf2e97d1056ec3292516cd92564f1b00366c1e37419444"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/layout.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 119,
                  "snippet": {
                    "text": "import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"../../globals.css\";"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0974c6f92da79222",
            "equalIndicator/v1": "c22cf003d096e324e93a5a16f0e672505b7b517e8d8335b79557016d26187d6c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-chat-scroll.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3609defe5257ee5b",
            "equalIndicator/v1": "c2a26d514fc894e552ca16e221e86810c5e78de28af8579d678ec5461c5c6e18"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/auth.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69,
                  "snippet": {
                    "text": "'use client'\n\nimport { DynamicForm } from '@/components/dynamic-form'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c43f9d1de43031cf",
            "equalIndicator/v1": "c30388e74c09a7d6fac152e97f761ad90a6a30ac5f03e751cedaba69c32a82b8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "92227797e6d79bd4",
            "equalIndicator/v1": "c5d7f59d0fb0982f2f0994bb5dcab5ae191190e887ebf00e0448993c139d3e2b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/current-user-avatar.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "67001264a22b60c3",
            "equalIndicator/v1": "c65775e3e552b662ba453f630341d17042bfe226511ad6dc5b91a914b48d104b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/logs.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 89,
                  "snippet": {
                    "text": "'use client'\n\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "45f0f560b4e07753",
            "equalIndicator/v1": "c7242ba7cbe0e439781b2f9463ffb1de97e9c3e1332ad76d6d654bacc2b9c93a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/core/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e25cf020f56ac38",
            "equalIndicator/v1": "c752bdf76c9aa9d4f33299d9ec455f0cfdec1e4b696b765e6f2de447774e7193"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-mobile.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "70ad22375ab19901",
            "equalIndicator/v1": "c77d53e79a89039c52e4a49c7c60dbfc53f77228ea97cdeb1ef6bfeaab8b18d9"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/tokens/colors.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 23,
                  "snippet": {
                    "text": "// Color palette tokens"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "// Color palette tokens\nexport const colorTokens = {\n  // Primary brand colors"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "26ccb54bef9e6903",
            "equalIndicator/v1": "c80249327846f6f3818ae55ca2727f282376cce4e62d3d9a788e3b47e01dfe8c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/users.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e6f6b6a687d6e41",
            "equalIndicator/v1": "c831e55288601bfa0d904eaaa27207f330c029e29da105595dcec1f5d0e9ee0a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/components/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "933b96a1b3eaf75a",
            "equalIndicator/v1": "c84b4857cbc2d1a9f06f2e3d3c0cbe75346fae472e3a8709a618e1ac0d259301"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-legal-links.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5f7874690cdc8393",
            "equalIndicator/v1": "c891f49281a869e37cb0d2fd656d90f128f47f03ec187d94cc221a5436c4fdef"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/avatar.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "21efb181b56ada70",
            "equalIndicator/v1": "c8d0cae50a094a44d347e1e939e36d534277e3caf121b25dd1e74a2b9ec0a513"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-run-query.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "316c5cf964d2200b",
            "equalIndicator/v1": "c9061b259c84fc47034197e7c458708e89eaa1ae5048ca2f91f2535ec3172f88"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/components/ui/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 157,
                  "snippet": {
                    "text": "import { Section } from '@/app/components/core/section'\nimport { Heading } from '@/app/components/ui/heading'\nimport { Card } from '@/app/components/ui/card'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3b6cb7bb401aabe4",
            "equalIndicator/v1": "c93fcafb82f0c822e398acf13e60ed1abefc42916edd9ad346c62c853957344a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/popover.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "39af19f5d64dc93a",
            "equalIndicator/v1": "c9f2b22c4f5396e890c898f3716450e57aecee6262f76414085fc85b72e29258"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/background.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 86,
                  "snippet": {
                    "text": "export function Background() {\n  return (\n    <div className=\"absolute inset-0 -z-10\">"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "433b9057b3f76cd1",
            "equalIndicator/v1": "c9f3ad6e97d37a7fa6c24c0b43706fb276a45406fc8418c7b34d17d22220f824"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/carousel.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7d28fe2051595633",
            "equalIndicator/v1": "ca1d61bd2e292ee2face62255ee5dae75e426427bd69270d1fd009d09f165342"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-nav.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7bc1718f51ef79d7",
            "equalIndicator/v1": "ca4372cef52d6d392cde6559737808ff738487d1fd4c706a1e07f42db255c627"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/core/link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c97bb9ce797f36cd",
            "equalIndicator/v1": "cb17f146e1e7edf2a1ab456743f3ee09e35031b2b53abe23842c6caefec6efff"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-supabase-upload.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1b96bd423513c810",
            "equalIndicator/v1": "cd16651d67bf14d47c46181dbd2390c799411df31ec8e702f329f3224e17a83e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/results-table.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 22,
                  "snippet": {
                    "text": "'use client'\n\nimport {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "60a0642713917fb3",
            "equalIndicator/v1": "cd44bbf501548126842067dd911c26e2540cbf912eecc8c801d16a79eaac1b0d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "824978ea3e2f1b8d",
            "equalIndicator/v1": "cd7134c7fd2350f9b7a95a3338fee553a90d64340e1a3dd567562f9c48ba7170"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/dropzone.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 46,
                  "snippet": {
                    "text": "'use client'\n\nimport { cn } from '@/lib/utils'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c7e39238612ca972",
            "equalIndicator/v1": "cdae7d49fea36d5352e1bc54a74ba285eddf9fca5282b18448841269c4b613bb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/chat-message.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a7ff54ed7cce532b",
            "equalIndicator/v1": "ce9a7026e566404f6b3bd87b4fc7153efa1b792a62782b66961e11ec686e8dcb"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f5568c8e51517b6a",
            "equalIndicator/v1": "ceb53e614615628558d27ebf808763229095bd6aef4b92f4a18d484928cef175"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-text.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "37c66342c92e8d50",
            "equalIndicator/v1": "cf89eec2b7df77ae0c3d9ce72ce933262562a1ad570dfab0a83ff63d65fea05e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sorter.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20,
                  "snippet": {
                    "text": "/* eslint-disable */"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 69,
                  "snippet": {
                    "text": "/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aa8499d7bad1f157",
            "equalIndicator/v1": "d00e3dcc885acf9b320cfe446435e6446be714d95874dd6f2231fb7f970b7136"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/drawer.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a876ef7a7f23ef6b",
            "equalIndicator/v1": "d0d6620d55cab7d2309ea7ba7365dcc08fb587435b1e42723f0befc01a843a45"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "181a5e1876188834",
            "equalIndicator/v1": "d123b59b11f9727f01a61fcadcd4633c5af628ab3b71883e1eb631e782c27709"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-secrets.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "34b790f3c904206a",
            "equalIndicator/v1": "d13059d95e71478788352d491dda86bcc1fc49526581e466850ec942e87e6bec"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/metric.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "05b489c0c0d56536",
            "equalIndicator/v1": "d153bbb003500abe7fdf1852dda85b154f9d59d42aba0f39a4ab3e33b2ec03b6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/separator.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c0ac1cf3a59eeb7d",
            "equalIndicator/v1": "d1ec8f193437f810b99d95b42d66ea9a18cb99f27228ec0dda81ede44ca44e9f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/dropzone.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "60f2082994787e9c",
            "equalIndicator/v1": "d27fcfcbd5bb15cc5cc516367e992cb1d6843d2c880ec3c7294d188e2598bf7c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/card.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a43787ded7ae7c40",
            "equalIndicator/v1": "d3442cca61e02417f00d32c15ce22974bdaea8746713714292c245e248613924"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-column.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8e486440d612b802",
            "equalIndicator/v1": "d405dccc1b445be5368a85ee9ab8f351460b6558bfb1337da97b087af7780269"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3b0a152ed660fddc",
            "equalIndicator/v1": "d4217f81a787f6d5038eb7c7e6fe4ada4320b4fa1171b21c654c9acd672a6359"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/context-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "76d0217bea2217d0",
            "equalIndicator/v1": "d4e02bee14545b0bfc372d842ed764f103b5b67df8877e1c6a24d0c6811d3e3c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/separator.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "400b8df025681c65",
            "equalIndicator/v1": "d54871d203a2c98bb1c203cabb4a428f5fc90edafa5919363e72df172282a285"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/input.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 64,
                  "snippet": {
                    "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c868425f2e52e236",
            "equalIndicator/v1": "d54f04cf5ef8a83d9dfed1038f4043cfbbb27576185968096418a92663338e4c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-text.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9b93653f29f8a5b2",
            "equalIndicator/v1": "d5c0a338d0daaee7dda7abe394bdfa81553a0a2b1f97619acc9bef2798666f45"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/results-table.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "57fdff2d2b392f5d",
            "equalIndicator/v1": "d676228dbd8338e3f9756c2761d4d10296d07e5ca0ad0d427b2961b1b117ac0f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/sidebar.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "553ee5090296e65c",
            "equalIndicator/v1": "d7f7b15e6869edcc69f77fad1139ccfc2a143954dcbcda9357f6ed6434b77568"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-cursors.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 58,
                  "snippet": {
                    "text": "'use client'\n\nimport { Cursor } from '@/components/cursor'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a3c858b1532c416e",
            "equalIndicator/v1": "d83d2d49be784a1e47f76f1ce0f9ca4de60a6d186d9db68c7cc1538b7daed18c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-nav.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 61,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface FooterNavProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "990838625462ebb5",
            "equalIndicator/v1": "d845037fc013610e553a45f7fe67b2a6686ef8eed720411a350f9fd76e422188"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/slider.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "21ea5942a3e3ffca",
            "equalIndicator/v1": "d85c57f23f48645cb3d2724573128cf2c13741e2823845413e83b857cc84a787"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/secrets.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f666902379286255",
            "equalIndicator/v1": "d90374504d8683a6b07d8fb4117ab0e3599495e1a80c3589942d319bb07ca922"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/brand-config.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6ab18cdf34163ee7",
            "equalIndicator/v1": "d9cca490a43069731cfd33e0c395be2c0b2d5ba4a6bde421f6c9fe9b20a61e75"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/list.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 48,
                  "snippet": {
                    "text": "import React from 'react'\n\ninterface ListProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "53aceb0751b7dfaa",
            "equalIndicator/v1": "da07aeeaf01bbef9d77d2d4b5f8bc41b53ebb78fe02c6e7a820aeef884543f23"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/label.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bb2789a910b9bb8a",
            "equalIndicator/v1": "da0c1647ba028279c16858f4ab253b4f63d981efdbc7a4b00b0a806e5f60266b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/radio-group.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d26d2ca6d8c9089f",
            "equalIndicator/v1": "da1039ed8225949371a23de4a506ed2accb0af6d8b43372af09ed6ff7686a32c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d07d142f1f4613ac",
            "equalIndicator/v1": "dae07d2c934a9c7de83bc7deee43cb2fa580967865610240047da8d6e575ee4f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/current-user-avatar.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "'use client'\n\nimport { useCurrentUserImage } from '@/hooks/use-current-user-image'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b2e088948361c76d",
            "equalIndicator/v1": "db9aa33c5553b9fb4ad771c60ea47e5c60b178c0b3a8b830e56b3cfd28f0727a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c3358346b0a6dc05",
            "equalIndicator/v1": "dbdd382b09a9efeb87929a2caa16919cf4b69c6664ffc58c1e6a94fb2d10b134"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/actions.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface ActionsProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "650b84cb91966157",
            "equalIndicator/v1": "dd328a1df20b6d90bf1e96d3f8c0e4c530961a811697e23349a95c93a4c0affe"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/alert.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 97,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "551b51fbed0c3e3f",
            "equalIndicator/v1": "dd7419e181a02798ae5424c914cb63f312cf870612a6f96339a5063d1eea9ea4"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/realtime-chat.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5ae22a470b3bc455",
            "equalIndicator/v1": "dd88c8d697eb3cbef9d4d59e6e90b5636937a012bfd2a4ea0f1f44e583ac46de"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cd64478c96f01d8c",
            "equalIndicator/v1": "dd9fffeb4464ceafae5252633146395c989e79c94a307ce6b116e1edc2fefb07"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/aspect-ratio.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "45866140c2914f9a",
            "equalIndicator/v1": "de3c92d1842637cc2049a28b2070fc41d19b76b59e5aeafca48a5f42ed6b29b8"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/tokens/spacing.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0dcfcace3b02d2f9",
            "equalIndicator/v1": "dea10395814fb5caf1a5e8bf0406380da0a907cc95d1bcab7fbeabf277bcfb52"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/index.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e71b6e4e33a2f5f5",
            "equalIndicator/v1": "df17b9236e4b1e1c013ff90db6dbc6526a61981cab82ce895aad8ae6f323947f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/list.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3499f87a9afc2d71",
            "equalIndicator/v1": "df44abe9a051038a68120345c0286713a6ef5def526d5f8deb96bd97402cc6f0"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/auth/login/page.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c30af1db3e241e8c",
            "equalIndicator/v1": "df47eb6b1072e2ce9fd25b97426e8ab6dafbbfd651ff8410ddd2252f2d0ed690"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/secrets.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aa8a17887c813df8",
            "equalIndicator/v1": "df58d5168282ef74d9d52dee674237ffc81a1545dc15ca562e6b45037d97bc66"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/index.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "512ff5bd50653438",
            "equalIndicator/v1": "e03a267029b216aa24f1bf409f1b4b9e8c73ab612c907ddd40ee8b71a1583056"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/avatar-stack.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0edf15f9e60d139",
            "equalIndicator/v1": "e0a473baa8d058e37aa33ce3cc8b00f819ca5424d322ddb2559ce0a0eaa9b686"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/collapsible.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "48ad8f08189210ec",
            "equalIndicator/v1": "e12c59e4b6f8e04bed44500da8b2561c80ea3c5c26bb975cca213de8e811015f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contexts/SheetNavigationContext.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 106,
                  "snippet": {
                    "text": "'use client'\n\nimport { createContext, useContext, useState, ReactNode, useMemo, useCallback } from 'react'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "89396838251f145a",
            "equalIndicator/v1": "e146c3460b45351d0f71dfa42b827b47bd0226858f3ed9c7f42427c617af7700"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/popover.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6976a5e527f5ad71",
            "equalIndicator/v1": "e14fb2efff902951b17449e4f5eb6bbb71235a8872d952ca80d7199d0a2a0d9b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/footer-link.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 78,
                  "snippet": {
                    "text": "import { Link } from '@/app/components/core/link'\n\ninterface FooterLinkProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dfe6bebf016add86",
            "equalIndicator/v1": "e2408316ba75c9b31a707eb5847053fd144bb8ecd2ce2f5f0f9fc213de53b9aa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 173,
                  "snippet": {
                    "text": "import { Section } from '@/app/components/core/section'\nimport { Background } from '@/app/components/layout/background'\nimport { Heading } from '@/app/components/ui/heading'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "66148cdb5499e5a3",
            "equalIndicator/v1": "e2723c6b97713c845ee84af594c8df8fae370455ffbf74048a4c2c00f1ed5135"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/core/link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8c7b42dd74b9832",
            "equalIndicator/v1": "e2ed00c481bc168d5512d6399c4268d0074957454bfd69f2dab7047285f2112d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/aspect-ratio.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ea28351af0777a9",
            "equalIndicator/v1": "e3066f33e250c5a3dc945b84cd48069adde7dfdd77c937d275af479780e4e7bd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3f65f88feb8c0812",
            "equalIndicator/v1": "e41d8fa89d5bf8c03fa796e87a33b9016c81c1f3b454f8352af6367092e1923b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "middleware.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 57,
                  "snippet": {
                    "text": "// Middleware disabled - home page is directly accessible"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 99,
                  "snippet": {
                    "text": "// Middleware disabled - home page is directly accessible\n// No authentication checks or redirects\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6df9a15cbe915c12",
            "equalIndicator/v1": "e43951ef5697e642b9a0f6b732799093fa5f912717fff2dacd6bb8f1eb1b6634"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/dynamic-form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1f34b4e719d1606f",
            "equalIndicator/v1": "e47746fb921f17e0c14e9f8840ae333f9f22a30cb0422f62e5800c2913499e5a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/nav-link.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d35212da8e574ddd",
            "equalIndicator/v1": "e4fc2c4ef9aa8cd14de2d36b262bc59c632062c72a8735cd63e194dcf482562e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/schemas/auth.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ca5629135ec4dbf3",
            "equalIndicator/v1": "e5883f4896d1a588551533479ca588f65888a6ee67cc5565405a0b04956e060b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/badge.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 140,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e51a66b061115120",
            "equalIndicator/v1": "e5f5b6a49a5a316a5b035762cc20102a2d988851cfc9a1703ca188e1ef13b2fd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/schemas/secrets.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "68ba37ae43323130",
            "equalIndicator/v1": "e71101c7aef55f30cf8002ab77e00d028a2694f990921bfec6f48439a4931583"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/block-navigation.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 20,
                  "snippet": {
                    "text": "/* eslint-disable */"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 123,
                  "snippet": {
                    "text": "/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "62a7ca8523da1811",
            "equalIndicator/v1": "e76e13f57c1ac3e9c4d99dd932f906e608000e65e2f993c5fd63b5242f008de5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/input.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "288171563ae64548",
            "equalIndicator/v1": "e7a06c73d70fafb5c5646c73c158213839d59dafa19745b7a39361ef491f35f3"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/dropdown-menu.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "642650cce63ec1fc",
            "equalIndicator/v1": "e7aa9bd4f515612a0baf9a31666ffc1188fe1f01f56c1383b902ad4b858ff6fa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "contexts/index.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44a01e48c32087d3",
            "equalIndicator/v1": "e81c2ef3274b1cccc38d494aa424f2472f64a99563209ba7c5159cc49042af4d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-user-counts.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44893f39d6ac11f6",
            "equalIndicator/v1": "e98bdd169179e93b3ec77f007cf1baf86e372f525d2677bba87905d587341a47"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/radio-group.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "84398516bde52737",
            "equalIndicator/v1": "e9a6ef2a6fc85c224b79e32e3738f0a373f18628f3e9267a86c029308afa1234"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/textarea.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 64,
                  "snippet": {
                    "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e0264e0f0b822c21",
            "equalIndicator/v1": "ea9d165ed29edd09cf1b452822c8257f83b9ee6139e24d3771eedf019f06f603"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/storage.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 65,
                  "snippet": {
                    "text": "'use client'\n\nimport { useGetBuckets } from '@/hooks/use-storage'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98bd166c62fa469b",
            "equalIndicator/v1": "eaa1075c5712585c6ccb5e567d48597714adb7c56f1eed9967ad111e967e1ec2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/index.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "da8da265e3172d43",
            "equalIndicator/v1": "ead0ab5146ccbf3826f527f5c7d49b9f02153df3b467a88e0e7c773d94a030ec"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/checkbox.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3f21b60ebae2caaf",
            "equalIndicator/v1": "eb39f9c4d759fd7ef3ec4e571029a3302f911e1f0974372c815fb50bd329c4a7"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-tables.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { listTablesSql } from '@/lib/pg-meta'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ce953d91e0b7b9da",
            "equalIndicator/v1": "eb3ff222ce1704fdda4781c245a893a5764385c99171c61118e71a717498e0cf"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-mobile.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 61,
                  "snippet": {
                    "text": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e8dddb9daddd474c",
            "equalIndicator/v1": "eb7404c66de1e16bd7c79d94664e7b34aa2d77a7328e310bbd43b64266b19705"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/pg-meta.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fa0905e36f6578a5",
            "equalIndicator/v1": "eba55103968e2011950e99832f4c2dbcd50f8494ef831e7812a650bd886cbb78"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/nav.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 55,
                  "snippet": {
                    "text": "import { ReactNode } from 'react'\n\ninterface NavProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "89065edc62115e42",
            "equalIndicator/v1": "ec93f8f8f1fb54a3b7a3454483f2b51d8c004f318d98a6d5c827eed963ae3f7c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/collapsible.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 81,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "63fb604255db504f",
            "equalIndicator/v1": "ed316bbd148941c605acfa48bd9b2af5760e248277aab4327df9ecf6d884dab2"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/heading.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b8c230243bd08873",
            "equalIndicator/v1": "edd82f11d95c80b111c2b7022cc3c3bcdf3d5ea8438982658309f0922976be7d"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/button.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "96cff1cb0ee754c2",
            "equalIndicator/v1": "eee254bebd5fb663970b34a1021e0e74e6c3669f0749004e2d0ba4cad1d053b5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/lib/sql.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "645ade0b5ecaf400",
            "equalIndicator/v1": "ef0569499bd91499a7baebfadc4d7e5ef303ca23849ffcd9d0c8d0158fdd5a87"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/dropdown-menu.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9276d12e65b3d22",
            "equalIndicator/v1": "ef3766803a54ed4a6f5b28730b3c3060f73e5f14d508865d37c1648b9207612c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/layout/nav.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a15b9ba4e6d81968",
            "equalIndicator/v1": "ef9a15b79788349201c59b8010862aceba8b39bf97be82667bfeb442f4b156bd"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-storage.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b35585bf8cea77a",
            "equalIndicator/v1": "f1e41541fc1208a296662dbe310cc8442851ec5a8df5957b79a5e4c89420102c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/hooks/use-realtime-presence-room.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7252a03ad53e5823",
            "equalIndicator/v1": "f39c3246bb46768db97df7a0c0d2d306aaa58bbd1e4a75577ed7a75bccb0b8cf"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/auth.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e1e239e70c9c17e0",
            "equalIndicator/v1": "f3d3057d6f43f6866025e504c817b35d4181e1ee6a4292b985964b3e1880aa69"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/tooltip.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a7d0f5678abe5a4d",
            "equalIndicator/v1": "f425671904971d9d9c22afdc291c9b1055f33870090003b0b7019c7473e728e6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/heading.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 82,
                  "snippet": {
                    "text": "import React from 'react'\nimport { brandConfig } from '@/app/components/branding'\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d947fb134c117898",
            "equalIndicator/v1": "f44450a78fafb09b64c87878720d2f1fe9117534cb05b5222b2873e831069d60"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/alert.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4114913844590e09",
            "equalIndicator/v1": "f47614a03247185156c16f350e19a1f4ea09b6b7447255a5b3273c38b086b08e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/code-block.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 53,
                  "snippet": {
                    "text": "import React from 'react'\n\ninterface CodeBlockProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1606455553c1d3f1",
            "equalIndicator/v1": "f4fed420192e55ead392a24828557ee40ff10984520611530f2f95cafefa587f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 157,
                  "snippet": {
                    "text": "import { Section } from '@/app/components/core/section'\nimport { Heading } from '@/app/components/ui/heading'\nimport { Card } from '@/app/components/ui/card'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e54417691cc02a6a",
            "equalIndicator/v1": "f53804d0b9cca10975aa0c948f185465e1fee343aa236f46b79ea520b34a047c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/progress.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "\"use client\""
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"use client\"\n\nimport * as React from \"react\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "84526381ab692350",
            "equalIndicator/v1": "f5d049e9ea41446fa15b55495ccb1c22383110d06b5f0280fa8a864b064df4db"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/scroll-area.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fc294b90451aa263",
            "equalIndicator/v1": "f7fd21e66c3ed5a5b2f7af09ddead4e883d822035b22a947cd13155abdd5b99b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/logs.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "export"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 83,
                  "snippet": {
                    "text": "export enum LogsTableName {\n  FN_EDGE = 'function_edge_logs',\n  AUTH = 'auth_logs',"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a56e47f8bd512ec5",
            "equalIndicator/v1": "f803b26f659040043a9bb315fa51cce6dc054b9a3248d6b19f0059ca6c101326"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/button.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 140,
                  "snippet": {
                    "text": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\""
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7003a9d3fc8cf5b",
            "equalIndicator/v1": "f83b1563010d3e17e7e269955f0fee8dd4735083a0565bed45922c72a03bce20"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/components/ui/form.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "217a5e52373506aa",
            "equalIndicator/v1": "f8ae4da986d49b0052c9c01dc5a83614b1ae81b7bfe535ae9d1357db6824b10b"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-run-query.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cd785212628bb0ca",
            "equalIndicator/v1": "f9b34e3bc060ea334c0042525a45474dbd8972ddd36d02819083842450c07bd5"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/secrets.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 51,
                  "snippet": {
                    "text": "import z from 'zod'\n\nexport const secretsSchema = z"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5e69aceb731e71a1",
            "equalIndicator/v1": "fa3e588ce93417cd42421af43269d4d477019cefbd7fcaed2bd1c44f3c874992"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-storage.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9797ff0dd4026b3b",
            "equalIndicator/v1": "fa95bb133de24ac1afeab5a9edfcd737b6cc27a5e684a88ad3cdb620c268b012"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/separator.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12ddb7a73e829cf2",
            "equalIndicator/v1": "fcb668c1dce37c8ba50f5076fd2f834c7b622445e1d22bd69fc5c3e465c8dc0c"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/alert.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "import"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 71,
                  "snippet": {
                    "text": "import * as ShadCN from '@/components/ui/alert'\n\ninterface AlertProps {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "451ef91fb2eb7660",
            "equalIndicator/v1": "fcba59b41131ce4fe44f9eb155deb733d25b9df181109a10d643d1142810611a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/branding/brand-utils.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "11c44cf467390e37",
            "equalIndicator/v1": "fd2f9cc2fc8e56a1355ed19594b75cec9bdd99e99f8f8d7fb98be6d700dc347a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-run-query.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 12,
                  "snippet": {
                    "text": "'use client'"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 59,
                  "snippet": {
                    "text": "'use client'\n\nimport { client } from '@/lib/management-api'"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8e1d3350372f914e",
            "equalIndicator/v1": "fd455cefebef1e2f0ddc685681a5c8dd10cd81cb0923add50f1fb68708e51a6f"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/ui/alert.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4221ab04b68f1d23",
            "equalIndicator/v1": "fd5df811a38fbdd82ec7c521ab7c59ae0396e80a4f3157fa9bb8abb87982dc8e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/ui/dialog.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3db9aecf87ae6fc9",
            "equalIndicator/v1": "fd9a807a3a4083958f0bb9bc7f1056feaa12ab731d8ee9da36390a94220bfa19"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/ui/label.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e9b6109ec61a542",
            "equalIndicator/v1": "fdf8d2bc5cf83b4136bb337607af5ea180c5774c3facc7781fe0ae61efbf404a"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-realtime-presence-room.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "17d10cf86091d8f1",
            "equalIndicator/v1": "fe24f147000e545d93faceed4555bc319fe870a4bb8065a88a84c8a2ef5b6356"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/app/components/layout/footer-legal.tsx.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6117ae6e94d76751",
            "equalIndicator/v1": "fe556ae3c0626c3f23f0bb95b97018161cb2adb7b164ae05d3cfef4b1115b2b6"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "Eslint",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "ESLint: Install the 'eslint' package",
            "markdown": "ESLint: Install the 'eslint' package"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-image.ts.html",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "charOffset": 1,
                  "charLength": 1,
                  "snippet": {
                    "text": "<"
                  },
                  "sourceLanguage": "HTML"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 34,
                  "snippet": {
                    "text": "\n<!doctype html>\n<html lang=\"en\">\n"
                  },
                  "sourceLanguage": "HTML"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "39a276b600d5d229",
            "equalIndicator/v1": "fe6c5266d77892e0c18f74a1cc7db995e76091abd49df7dcc61bae55b2bbfe5e"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "problemType": "REGULAR",
            "tags": [
              "HTML"
            ]
          }
        },
        {
          "ruleId": "ExceptionCaughtLocallyJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'throw' of exception caught locally",
            "markdown": "'throw' of exception caught locally"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/update-password-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 18,
                  "charOffset": 966,
                  "charLength": 5,
                  "snippet": {
                    "text": "throw"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 870,
                  "charLength": 245,
                  "snippet": {
                    "text": "    try {\n      const { error } = await supabase.auth.updateUser({ password })\n      if (error) throw error\n      // Update this route to redirect to an authenticated route. The user already has an active session.\n      router.push('/protected')"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b32ea85072ecab6",
            "equalIndicator/v1": "64ca75be23244bc44139913dd8c26fe9718a1c5ec8fc690c77ebb9a15417d789"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "ExceptionCaughtLocallyJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'throw' of exception caught locally",
            "markdown": "'throw' of exception caught locally"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sql-editor.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "charOffset": 3301,
                  "charLength": 5,
                  "snippet": {
                    "text": "throw"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 3219,
                  "charLength": 153,
                  "snippet": {
                    "text": "      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || 'Failed to generate SQL')\n      }\n"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "48178eb5fee535e4",
            "equalIndicator/v1": "a47658491f2fa7bc7beec41972e632483ae8881d951c3533a770fe1c10271486"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "ExceptionCaughtLocallyJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'throw' of exception caught locally",
            "markdown": "'throw' of exception caught locally"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/forgot-password-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 18,
                  "charOffset": 1250,
                  "charLength": 5,
                  "snippet": {
                    "text": "throw"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1154,
                  "charLength": 161,
                  "snippet": {
                    "text": "        redirectTo: `${window.location.origin}/auth/update-password`,\n      })\n      if (error) throw error\n      setSuccess(true)\n    } catch (error: unknown) {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d08163ff2944c25",
            "equalIndicator/v1": "e23e13ecd5f69179fb512bdee4ae33f7e2eaab585cf0591e70805f8642128c1c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "ExceptionCaughtLocallyJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'throw' of exception caught locally",
            "markdown": "'throw' of exception caught locally"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/login-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "charOffset": 985,
                  "charLength": 5,
                  "snippet": {
                    "text": "throw"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 958,
                  "charLength": 146,
                  "snippet": {
                    "text": "      })\n\n      if (error) throw error\n    } catch (error: unknown) {\n      setError(error instanceof Error ? error.message : 'An error occurred')"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46e48843caeb12be",
            "equalIndicator/v1": "e3adea0c0d4103888dd160ca80b6aed2b283b03e0a05752b04efb6836e2bb091"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "ExceptionCaughtLocallyJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'throw' of exception caught locally",
            "markdown": "'throw' of exception caught locally"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sign-up-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 18,
                  "charOffset": 1327,
                  "charLength": 5,
                  "snippet": {
                    "text": "throw"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1290,
                  "charLength": 122,
                  "snippet": {
                    "text": "        },\n      })\n      if (error) throw error\n      router.push('/auth/sign-up-success')\n    } catch (error: unknown) {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20919244bef9102b",
            "equalIndicator/v1": "fb318d2ee20c219fad4debd0d34a92c5c7d4ea76c8e0d8d3cf7e567d09659754"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from fetchProfileName is ignored",
            "markdown": "Promise returned from fetchProfileName is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-name.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "charOffset": 453,
                  "charLength": 16,
                  "snippet": {
                    "text": "fetchProfileName"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 442,
                  "charLength": 39,
                  "snippet": {
                    "text": "    }\n\n    fetchProfileName()\n  }, [])\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ddfc95a9fb8332d7",
            "equalIndicator/v1": "18caf784317123872d32947993ab49474c45ba71056da2c352cfcc71e1a4b0cc"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from handleRunNaturalLanguageQuery is ignored",
            "markdown": "Promise returned from handleRunNaturalLanguageQuery is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/sql-editor.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 21,
                  "charOffset": 10315,
                  "charLength": 29,
                  "snippet": {
                    "text": "handleRunNaturalLanguageQuery"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 285,
                  "startColumn": 1,
                  "charOffset": 10198,
                  "charLength": 187,
                  "snippet": {
                    "text": "                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault()\n                    handleRunNaturalLanguageQuery()\n                  }\n                }}"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e63f98b572553b0d",
            "equalIndicator/v1": "29d374bd543596c5739d6f5b05bd3feed0f6fdf8a1a9010dfa8f0542523a4f9c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from initialize is ignored",
            "markdown": "Promise returned from initialize is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-infinite-query.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 24,
                  "charOffset": 5401,
                  "charLength": 10,
                  "snippet": {
                    "text": "initialize"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 5310,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n    if (!state.hasInitialFetch && typeof window !== 'undefined') {\n      storeRef.current.initialize()\n    }\n  }, [props.tableName, props.columns, props.pageSize, state.hasInitialFetch])"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6ff06832c883d857",
            "equalIndicator/v1": "687ff5e21beee6e7f6f733c31324eab23760d01c181f76e4878cc31874bb2f4b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from sendMessage is ignored",
            "markdown": "Promise returned from sendMessage is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-chat.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "charOffset": 2323,
                  "charLength": 11,
                  "snippet": {
                    "text": "sendMessage"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2263,
                  "charLength": 114,
                  "snippet": {
                    "text": "      if (!newMessage.trim() || !isConnected) return\n\n      sendMessage(newMessage)\n      setNewMessage('')\n    },"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6231d00ee7b47d82",
            "equalIndicator/v1": "a5dfb61706f0cd25693138bd100de32da7136cc74c0055de374f5e5c3696932c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSIgnoredPromiseFromCall",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Promise returned from fetchUserImage is ignored",
            "markdown": "Promise returned from fetchUserImage is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-current-user-image.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "charOffset": 456,
                  "charLength": 14,
                  "snippet": {
                    "text": "fetchUserImage"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 378,
                  "charLength": 104,
                  "snippet": {
                    "text": "      setImage(data.session?.user.user_metadata.avatar_url ?? null)\n    }\n    fetchUserImage()\n  }, [])\n"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a24298ad5ec00b29",
            "equalIndicator/v1": "b3835dad18c5b53427c1dbb4bfbdae1153b039087518aaa25c9b28996b7e1092"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUndefinedPropertyAssignment",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'data' is not defined in type 'HTMLTableRowElement'",
            "markdown": "Property data is not defined in type HTMLTableRowElement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lcov-report/sorter.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 21,
                  "charOffset": 3758,
                  "charLength": 4,
                  "snippet": {
                    "text": "data"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3690,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2fe338d593dac81f",
            "equalIndicator/v1": "1a15ae43c2f2db08bfa60baf7c11eed0aa770c95527cb0f0a898c60e449cb04a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUndefinedPropertyAssignment",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Property 'data' is not defined in type 'HTMLTableRowElement'",
            "markdown": "Property data is not defined in type HTMLTableRowElement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "sorter.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 21,
                  "charOffset": 3758,
                  "charLength": 4,
                  "snippet": {
                    "text": "data"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 3690,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }"
                  },
                  "sourceLanguage": "JavaScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f819161304c767b",
            "equalIndicator/v1": "86cba5c16a31bf880ac7a2dfa57bf019044c5ed3f0286b617b3e7b2e2291b537"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused parameter key",
            "markdown": "Unused parameter key"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "__tests__/page.test.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 66,
                  "charOffset": 501,
                  "charLength": 3,
                  "snippet": {
                    "text": "key"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 327,
                  "charLength": 254,
                  "snippet": {
                    "text": "// Mock any other complex components that might cause issues\r\njest.mock('../components/ui/button', () => ({\r\n  Button: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (\r\n    <button {...props}>{children}</button>\r\n  ),\r"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0d369a3587b5fd55",
            "equalIndicator/v1": "061cdabbb40712d134aa9722b4eccb55f51a230d02fd16a32cf98b81fe8554b4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused parameter key",
            "markdown": "Unused parameter key"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/suggestions.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 112,
                  "charOffset": 3727,
                  "charLength": 3,
                  "snippet": {
                    "text": "key"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3541,
                  "charLength": 340,
                  "snippet": {
                    "text": "                      <ReactMarkdown\n                        components={{\n                          code({ inline, children, ...props }: { inline?: boolean; children: React.ReactNode; [key: string]: unknown }) {\n                            return inline ? (\n                              <code className=\"bg-muted px-1 rounded\" {...props}>"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "390007f76c506c79",
            "equalIndicator/v1": "0b63e0690d9303f5756d881c85e8cbd255678a6bb8758af90b3b514daa2b268b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function MyPage",
            "markdown": "Unused function MyPage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 10,
                  "charOffset": 13018,
                  "charLength": 6,
                  "snippet": {
                    "text": "MyPage"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 297,
                  "startColumn": 1,
                  "charOffset": 12954,
                  "charLength": 122,
                  "snippet": {
                    "text": "import { Heading } from '@/app/components/ui/heading'\n\nfunction MyPage() {\n  return (\n    <Section container spacing=\"lg\">"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9ad574679aa71bf6",
            "equalIndicator/v1": "0de979ce654a61c0c48a70d0ca1f363ab4a87d5597aa39edae23a52b15a02d0b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused function Dashboard",
            "markdown": "Unused function Dashboard"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/components/ui/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 10,
                  "charOffset": 12975,
                  "charLength": 9,
                  "snippet": {
                    "text": "Dashboard"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 12913,
                  "charLength": 123,
                  "snippet": {
                    "text": "import { Metric } from '@/app/components/ui/metric'\n\nfunction Dashboard() {\n  return (\n    <Section container spacing=\"xl\">"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "885d6f186b0cf30f",
            "equalIndicator/v1": "55a61dcde41e12da69621f0d4e2029e1240070d2583846af416a17328815e95c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSUnusedLocalSymbols",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused parameter request",
            "markdown": "Unused parameter request"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "middleware.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 34,
                  "charOffset": 181,
                  "charLength": 7,
                  "snippet": {
                    "text": "request"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 4,
                  "startColumn": 1,
                  "charOffset": 100,
                  "charLength": 166,
                  "snippet": {
                    "text": "import { type NextRequest } from 'next/server'\n\nexport async function middleware(request: NextRequest) {\n  // No middleware logic - all routes are accessible\n  return"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2ff6d10ef93fb8da",
            "equalIndicator/v1": "6d3cccd9b7d247b2fdf46868f65900d54ef16cd5e7f6b2776f0c3dd079a7799a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "JSXUnresolvedComponent",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unresolved component 'Heading'",
            "markdown": "Unresolved component Heading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/docs/components/layout/page.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 4,
                  "charOffset": 10762,
                  "charLength": 7,
                  "snippet": {
                    "text": "Heading"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 284,
                  "startColumn": 1,
                  "charOffset": 10728,
                  "charLength": 112,
                  "snippet": {
                    "text": "  \n  {/* Your page content */}\n  <Heading level={1}>Page Title</Heading>\n</Section>`}</pre>\n              </div>"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bb37ad0ac38dcb58",
            "equalIndicator/v1": "f1646150a93cee9ebf8a1aab431433d1d7ab839889b634b3bb70ee2dc202aaaa"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "qodanaSeverity": "Moderate",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "SuspiciousTypeOfGuard",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Invalid 'typeof' check: 'value' cannot have type 'string'",
            "markdown": "Invalid 'typeof' check: 'value' cannot have type 'string'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/dynamic-form.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 24,
                  "charOffset": 6642,
                  "charLength": 25,
                  "snippet": {
                    "text": "typeof value === 'string'"
                  },
                  "sourceLanguage": "TypeScript JSX"
                },
                "contextRegion": {
                  "startLine": 179,
                  "startColumn": 1,
                  "charOffset": 6527,
                  "charLength": 295,
                  "snippet": {
                    "text": "            } else if (value === null || value === undefined) {\n              acc[key] = []\n            } else if (typeof value === 'string' && value.startsWith('{') && value.endsWith('}')) {\n              // Parse PostgreSQL array format like {ONE,TWO} into JavaScript array\n              try {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a2b62203b6422565",
            "equalIndicator/v1": "9778d683800718d376fd2e9031b0a9697fac8204a7079034345d2bbf7f97f3f2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "TypeScript JSX"
            ]
          }
        },
        {
          "ruleId": "SuspiciousTypeOfGuard",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant 'typeof' check: 'base' always has type 'string'",
            "markdown": "Redundant 'typeof' check: 'base' always has type 'string'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "app/components/branding/brand-config.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 27,
                  "charOffset": 1087,
                  "charLength": 31,
                  "snippet": {
                    "text": "typeof config.base === 'string'"
                  },
                  "sourceLanguage": "TypeScript"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 1023,
                  "charLength": 128,
                  "snippet": {
                    "text": "  \n  // Add base classes if available\n  if ('base' in config && typeof config.base === 'string') {\n    classes = config.base\n  }"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0460f1961018ba7c",
            "equalIndicator/v1": "e076006507cfe55864b926220039c7d4fa6d4273ce866f2f16cd4cab86cbbdba"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "TypeScript"
            ]
          }
        },
        {
          "ruleId": "TrivialIfJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'if' statement can be simplified",
            "markdown": "`if` statement can be simplified"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hooks/use-supabase-upload.ts",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 5,
                  "charOffset": 2255,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2226,
                  "charLength": 116,
                  "snippet": {
                    "text": "      return false\n    }\n    if (errors.length === 0 && successes.length === files.length) {\n      return true\n    }"
                  },
                  "sourceLanguage": "TypeScript"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f81e50b5484b9ec8",
            "equalIndicator/v1": "8adc1ab4d4aa84c2848d7225faf10eafe278415a3da25152f3b8fecc96982201"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "UnnecessaryLocalVariableJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'result' is redundant",
            "markdown": "Local variable result is redundant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/auth.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 11,
                  "charOffset": 1921,
                  "charLength": 6,
                  "snippet": {
                    "text": "result"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 1850,
                  "charLength": 195,
                  "snippet": {
                    "text": "    }\n    const schemaKeys = Object.keys(actualSchema.shape)\n    const result = schemaKeys.reduce(\n      (acc, key) => {\n        if (Object.prototype.hasOwnProperty.call(allInitialValues, key)) {"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f0335fed5c8e0d6",
            "equalIndicator/v1": "55c9fafb0a9183849312bfecf4b260d6240dd5657d79d2eba288e47cd98eabf0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        },
        {
          "ruleId": "UnnecessaryLocalVariableJS",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'sortedMessages' is redundant",
            "markdown": "Local variable sortedMessages is redundant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "components/realtime-chat.tsx",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "charOffset": 1775,
                  "charLength": 14,
                  "snippet": {
                    "text": "sortedMessages"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 1730,
                  "charLength": 158,
                  "snippet": {
                    "text": "    )\n    // Sort by creation date\n    const sortedMessages = uniqueMessages.sort((a, b) => a.createdAt.localeCompare(b.createdAt))\n\n    return sortedMessages"
                  },
                  "sourceLanguage": "TypeScript JSX"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "notto",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0f39f36b0ba94a5c",
            "equalIndicator/v1": "88e5ba3607b2dcb75faccd69b4fe12562b0d0826b874d7bd92962a8c3cf8f8a4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "problemType": "REGULAR",
            "tags": [
              "JavaScript"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2025-08-24",
        "guid": "8128e172-5214-4498-9175-1a4b581a5682",
        "properties": {
          "jobUrl": "",
          "analysisKind": "regular"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.coverage.files.provided": true,
        "configProfile": "recommended",
        "deviceId": "200820300000000-4655-a402-ae8f-b187e74303a4",
        "qodanaNewResultSummary": {
          "high": 16,
          "critical": 480,
          "moderate": 8,
          "total": 504
        }
      }
    }
  ]
}