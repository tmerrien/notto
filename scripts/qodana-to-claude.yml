# Add this to your existing .github/workflows/qodana_code_quality.yml
# or create a separate workflow for Qodana analysis

name: Qodana Analysis for Claude
on:
  workflow_dispatch:
  push:
    branches: [master, main]
  pull_request:

jobs:
  qodana-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2025.2
        with:
          pr-mode: false
          use-caches: true
          upload-result: true  # Upload to Qodana Cloud
          args: --save-report --results-dir=qodana-results
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1734009880 }}
          QODANA_ENDPOINT: 'https://qodana.cloud'

      - name: Extract Qodana Issues for Claude
        run: |
          # Create Claude-friendly summary
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          // Check if SARIF file exists
          const sarifFile = fs.existsSync('qodana-results/qodana.sarif.json') 
            ? 'qodana-results/qodana.sarif.json'
            : 'qodana.sarif.json';
            
          if (!fs.existsSync(sarifFile)) {
            console.log('No SARIF file found');
            process.exit(0);
          }

          const sarif = JSON.parse(fs.readFileSync(sarifFile, 'utf8'));
          const results = sarif.runs[0].results || [];
          
          if (results.length === 0) {
            console.log('✅ No issues found!');
            process.exit(0);
          }

          // Group issues by severity and type
          const issuesByRule = {};
          const issuesByFile = {};
          
          results.forEach(result => {
            const rule = result.ruleId || 'Unknown';
            const location = result.locations?.[0];
            const file = location?.physicalLocation?.artifactLocation?.uri || 'Unknown';
            const line = location?.physicalLocation?.region?.startLine || 0;
            const message = result.message?.text || 'No description';
            const severity = result.level || 'info';
            
            if (!issuesByRule[rule]) issuesByRule[rule] = [];
            issuesByRule[rule].push({ file, line, message, severity });
            
            if (!issuesByFile[file]) issuesByFile[file] = [];
            issuesByFile[file].push({ rule, line, message, severity });
          });

          // Create summary for Claude
          const summary = {
            totalIssues: results.length,
            topRules: Object.entries(issuesByRule)
              .sort(([,a], [,b]) => b.length - a.length)
              .slice(0, 10)
              .map(([rule, issues]) => ({
                rule,
                count: issues.length,
                severity: issues[0].severity,
                examples: issues.slice(0, 3)
              })),
            topFiles: Object.entries(issuesByFile)
              .sort(([,a], [,b]) => b.length - a.length)
              .slice(0, 10)
              .map(([file, issues]) => ({
                file,
                count: issues.length,
                rules: [...new Set(issues.map(i => i.rule))]
              }))
          };

          // Write to file for artifact upload
          fs.writeFileSync('qodana-claude-summary.json', JSON.stringify(summary, null, 2));
          
          console.log('📊 Qodana Analysis Summary for Claude:');
          console.log(JSON.stringify(summary, null, 2));
          "

      - name: Upload Qodana Results for Claude
        uses: actions/upload-artifact@v4
        with:
          name: qodana-claude-analysis
          path: |
            qodana-claude-summary.json
            qodana.sarif.json
            qodana-results/
        if: always()

      - name: Comment PR with Claude-Ready Analysis
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('qodana-claude-summary.json')) {
              return;
            }
            
            const summary = JSON.parse(fs.readFileSync('qodana-claude-summary.json', 'utf8'));
            
            if (summary.totalIssues === 0) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '✅ **Qodana Analysis**: No issues found! Great work! 🎉'
              });
              return;
            }

            const body = `## 🔍 Qodana Analysis Results

**Total Issues**: ${summary.totalIssues}

### 🎯 Top Issues to Fix:
${summary.topRules.slice(0, 5).map(rule => 
  `- **${rule.rule}**: ${rule.count} occurrences (${rule.severity})`
).join('\n')}

### 📁 Files with Most Issues:
${summary.topFiles.slice(0, 5).map(file => 
  `- \`${file.file}\`: ${file.count} issues`
).join('\n')}

### 🤖 Claude Integration:
Download the \`qodana-claude-analysis\` artifact from this workflow run and share it with Claude to get automated fixes!

**Claude Prompt**: "Analyze this Qodana report and help me fix the most critical issues in my TypeScript/React project."
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
